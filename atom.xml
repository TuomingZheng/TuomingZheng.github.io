<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[郑拓铭博客]]></title>
  <link href="http://TuomingZheng.github.io/atom.xml" rel="self"/>
  <link href="http://TuomingZheng.github.io/"/>
  <updated>2014-11-06T00:09:25+08:00</updated>
  <id>http://TuomingZheng.github.io/</id>
  <author>
    <name><![CDATA[TuomingZheng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shell命令之备份与恢复]]></title>
    <link href="http://TuomingZheng.github.io/blog/2014/11/05/shellming-ling-zhi-bei-fen-yu-hui-fu/"/>
    <updated>2014-11-05T23:58:38+08:00</updated>
    <id>http://TuomingZheng.github.io/blog/2014/11/05/shellming-ling-zhi-bei-fen-yu-hui-fu</id>
    <content type="html"><![CDATA[<blockquote><p>备份是生活中比不可少的操作，如果在灾难发生时没有必要的备份那你将会欲哭无泪。Linux系统的Shell提供了强有力
的备份工具dump,为此我们有必要来了解一下这个很酷的小伙子。@@</p></blockquote>

<p>
Linux上有个强大的备份工具，那就是使用dump命令。dump命令的功能十分强大，该命令不仅可以备份整个文件系统而且
还可以备份指定的目录。不过dump命令在备份目录时存在一定的限制，那就是只能完整的备份整个目录，无法制定等级
进行备份。
</p>


<p>
下面将具体介绍使用dump进行文件系统备份和目录备份，以及他们的区别：  
</p>


<p><li>使用dump命令备份整个文件系统：</li></p>

<p>
使用dump命令备份整个文件系统时可以制定等级进行备份，也就是说我们可以在第一次备份指定文件系统时进行完整备份，
在以后对同一个文件系统进行备份时只需要备份当前文件系统与以前备份之间差异就可以。这样就可以大大减轻备份文件
对系统空间的使用量。
</p>


<pre><code>                    dump    [-Suvj#] [-f 生成的备份文件]  待备份文件  
                            -S 查看备份指定文件需要的磁盘空间  
                            -u 将本次进行备份的时间记录到/etc/dumpdates文件内  
                            -v 查看dump备份过程中的信息  
                            -# #代表数字0到9，这个参数一般在制定等级备份时使用  
                            -f 备份产生的文件名称  

                    dump -W &lt;&lt;== 该命令查看/etc/fstab内具有dump设置的分区是否备份过

                    例子：   $ df -h &lt;&lt;== 找出最小的文件系统进行备份处理
                            $ dump -0vj -f root.dump0 /     &lt;&lt;== 对root目录进行备份, 在这里
                                                                 root目录是一个文件系统  
                            $ touch new_file.txt            &lt;&lt;== 在根目录下新建一个文件  
                            $ dump -1vj -f root.dump1 /     &lt;&lt;== 制定等级进行备份  
</code></pre>

<p><li>使用dump命令备份指定目录：</li></p>

<p>
使用dump命令备份目录存在一定的限制，例如无法使用-u、-#参数并且所有的备份数据必须在该目录下。  
</p>


<pre><code>                    dump    [-Svj] [-f 生成的备份文件]   待备份文件  
                            -S  查看备份指定文件需要的磁盘空间  
                            -v  显示备份过程中的信息  
                            -j  数据使用bzip2进行压缩  
                            -f  备份产生的文件名字  

                    例子：   $ dump -S /etc  &lt;&lt;== 查看备份etc目录所需的磁盘空间  
                            $ dump -0vj -f etc.dump /etc    &lt;&lt;== 对etc目录进行压缩备份  
</code></pre>

<p><li>使用restore命令进行恢复操作：</li></p>

<pre><code>    restore用法：            restore -t [-f dumpfile] [-h]   &lt;&lt;== 查看dump文件  
                            restore -C [-f dumpfile] [-D 挂载点] &lt;&lt;== 比较dump与实际文件  
                            restore -i [-f dumpfile]                &lt;&lt;== 进入互动模式，可以  
                                                                         进行部分文件还原  
                            restore -r [-f dumpfile]        &lt;&lt;== 还原整个文件系统  

                            其中-i一般进行目录的还原，而-r一般是进行文件系统的还原, -D参数表示  
                        查看挂载点与dump内的不同文件  

    例子：       $ restore -t -f etc.dump        &lt;&lt;== 查看etc.dump内备份含有的数据  
                $ restore -i -f etc.dump        &lt;&lt;== 进入交互模式可以对目录进行部分还原   
</code></pre>

<p>
其中restore的交互模式中可以使用add file、delete file和extract进行部分文件恢复的添加、删除和最终执行恢复操作。  
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android设备Rooting]]></title>
    <link href="http://TuomingZheng.github.io/blog/2014/11/05/androidshe-bei-rooting/"/>
    <updated>2014-11-05T23:51:48+08:00</updated>
    <id>http://TuomingZheng.github.io/blog/2014/11/05/androidshe-bei-rooting</id>
    <content type="html"><![CDATA[<blockquote><p>Android设备的Rooting的比较常用的操作，Rooting的目的是取得目标设备上的超级用户权限。一旦拥有超级用户
权限可以进行很多令人惊奇的操作。为此有必要了解一下Android设备的存储分区，启动过程和历史上一些Rooting
的原理。</p></blockquote>

<h1>Android设备存储分区</h1>


<p>
存储分区是Android设备的逻辑存储单元，存储布局包括各种分区在存储器上排列顺序、偏移量和大小等内容。存储
布局通常是由Boot Loader进行处理，但也有一部分设备是由Android系统的Kernel进行处理。各个设备厂商的存储器
分区布局一般是不同的，但是Android设备一部分存储分区必须是固定的。
</p>


<h2>Android设备NAND FLASH分区</h2>


<p>Android设备的NAND FLASH必须遵循特定的分区布局，他们的布局如下：
<li>
boot loader分区: 该分区存储设备的Boot loader程序，boot loader程序用来初始化设备硬件、启动系统Kernel和实
现一些特定到启动模式
</li>
<li>
Splash分区： 该分区存储设备的启动时显示的图片，但一部分设备厂商将启动图片设置在boot loader程序内所以
这个分区可能没有。
</li>
<li>
boot分区： 该分区存放Android系统启动镜像，包括Android系统的Kernel(zImage)和根文件系统。
</li>
<li>
recovery分区： 该分区存放简化的Android系统启动镜像，该镜像仅仅包含Kernel镜像和recovery根文件系统。
</li>
<li>
system分区：该分区保存Android系统镜像，系统镜像包括Framework、libraries(库)、系统可执行程序和设备预装
程序。该分区将挂载到设备系统上的“/system”目录。
</li>
<li>
userdata分区：该分区也被称为数据分区，设备上应用程序的数据以及文件等将保存在该分区上，在启动后的设备上
该分区将被挂载到“/data”目录上。
</li>
<li>
cache分区：该分区存诸如recover日志文件，packages更新文件等放实用文件。如果设备将packages安装在SD卡上将
在分区内创建一个dalvik-cache目录。
</li>
<li>
radio分区：该分区存放基带镜像。
</li></p>

<h2>设备分区查看</h2>


<p>
可以使用cat命令查看“/proc/partitions”查看设备的分区情况，也可以查看/dev/block/platform/目录下的“by-name”
目录内的文件。
</p>


<p>
以下是在Google Nexus4设备（Android4.4系统）上查看“partition”情况：</br>
<img class="center" src="http://TuomingZheng.github.io/images/android_proc_partitions.png" title="" >
</p>


<p>
以下是查看“by-name”目录内文件情况Google Nexus4：</br>
<img class="center" src="http://TuomingZheng.github.io/images/android-dev-block-by-name.png">
</p>




<h1>Android设备启动过程概述</h1>


<p>
设备开启最先运行的程序是Boot Loader，该程序一般是由设备厂商提供的。Boot loader程序的功能一般是初始化底层
硬件，包括RAM存储、系统时钟和启动媒体等。Boot Loader同时为加载recovery镜像和设置设备进入下载模式提供支持。
</p>


<p>
在Boot Loader初始化好设备硬件后将Android系统的Kernel从外设boot分区加载到RAM中，接下来将执行控制权交给Android
系统的Kernel。Android内核将为系统初始化各种运行条件，启动各种系统运行所必须的系统服务等。这些包括内存初始化，
内存保护初始化、中断处理程序初始化、加载设备驱动程序等。最后内核将挂载根文件系统、启动“init”进程，“init”进程
是用户空间内所有进程的父进程。“init”进程通过解析“init.rc”和&#8221;init_hw_.rc&#8221;配置脚本启动用户空间内的各种系统服务
和组件。“init”进程启动的进程包括Android Debug Bridge守护进程、Zygote进程初始化Java运行环境，SystemServer进程
等。在SystemServer进程内的ActivityManagerService的<code>systemReady()</code>方法内将发送“ACTION_BOOT_COMPLETED”
广播等。
</p>


<h2>进入下载模式</h2>


<p>
当设备处于下载模式时我们可以修改外围存储设备内容，包括擦除设备的分区、执行另一个内核镜像等。擦除操作一般可以
通过“fastboot”协议实现，各个设备厂商使用的协议可能不同。各个设备进入下载模式的按键操作不太一样，这是有设备的
Boot Loader程序决定的。
</p>


<p>
例如Google Nexus4设备需要在设备关机时同时按下音量减小键和启动键，该设备的下载模式显示如下：</br>
</p>


<p><img class="center" src="http://TuomingZheng.github.io/images/google_nexus4_download_mode.png"></p>

<h1>BootLoaders加锁与解锁</h1>


<p>
加锁的Boot Loader限制用户修改设备的固件，这些限制大多数是通过加密签名验证限制用户启动或则刷未经过认证的程序
到设备上。Google Nexus系列设备的Boot Loader默认是锁定的，如果用户希望运行一个定制的内核、recovery镜像或则操作
系统镜像那么必须先将Boot Loader解锁。各个设备厂商针对各自不同型号的设备提供不同解锁Boot Loader的方法，大多数
是设置设备进入FastBoot模式然后使用Android SDK提供的“fastboot”程序运行<code>fastboot oem unlock</code>命令。
</p>


<p>
一个Android设备的Boot Loader一旦解锁就会带来安全问题，如果你的设备丢失那么攻击者可以通过向你的设备刷入定制的
recovery镜像就可以访问设备上的所有数据包括Google账户、联系人等等。
</p>




<h2>Stock Recovery镜像和Custom Recovery镜像</h2>


<p>
Android的recovery系统负责在不擦除用户数据的情况下更新整个系统预装的应用程序的功能。Recovery除了支持OTA更新外也
支持擦除用户数据和cache分区。Recovery镜像存放在设备的recovery分区，该镜像文件仅仅包含最小的Linux镜像用于实现通
过物理按钮控制功能。用户可以通过使用物理按键的特定组合进入recovery模式或则通过adb程序的reboot recovery命令进入
Recovery模式。
</p>


<p>
    Stock recovery镜像是Android开发主分支上的，他一般需要保持前后的兼容性。而Custom Recovery镜像（定制的
Recovery镜像）很多，一般修改内容/br>
</p>


<p><li>选择性的挂载特定的分区</li>
<li>使用USB访问SD或则NAND FLASH分区</li>
<li>提供adb访问，adbd以超级用户运行</li>
<li>包含完全的备份和恢复功能</li></p>

<h1>Boot Loader解锁状态下的Rooting</h1>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Virtual Machine垃圾收集器]]></title>
    <link href="http://TuomingZheng.github.io/blog/2014/11/05/java-virtual-machinela-ji-shou-ji-qi/"/>
    <updated>2014-11-05T23:47:34+08:00</updated>
    <id>http://TuomingZheng.github.io/blog/2014/11/05/java-virtual-machinela-ji-shou-ji-qi</id>
    <content type="html"><![CDATA[<blockquote><p>垃圾收集器是虚拟机内存回收的具体实现，不同Java虚拟机的垃圾收集器存在很大的区别。用户甚至可以组合各个年代所使用的垃圾收集器。</p></blockquote>

<p>
    接下来将分别列出常见的几个垃圾收集器原理以及他们的特点。`
</p>


<h1>Serial收集器</h1>


<p>
Serial收集器是历史最为悠久的垃圾收集器，这个收集器是一个单线程的垃圾收集器。该收集器不仅仅只会使用一个CPU或则一个线程去进行
垃圾收集工作，在他进行垃圾收集操作时必须暂停其他所有的工作线程。
</p>


<p>
Serial收集器的特点是简单而且高效，对于限定单个CPU环境时，Serial收集器由于没有线程交互的开销，可以获得最高的单线程收集效率。
Serial收集器是Client模式下虚拟机收集器的一个很好的选择。
</p>




<h1>ParNew收集器</h1>


<p>
ParNew收集器与Serial收集器的不同之处是ParNew收集器采用多线程进行垃圾收集操作，该收集器是Server模式下虚拟机中首选的新生代收集器。
在单CPU环境下ParNew收集器由于线程交互的开销，效果没有Serial收集器理想。
</p>


<p><strong>并行</strong>：<em>垃圾收集线程并行工作，而用户线程处于等待状态。</em></br>
<strong>并发</strong>: <em>用户线程和垃圾收集线程同时执行，用户程序在继续运行而垃圾收集程序运行在另一个CPU上。</em></p>

<h1>Parallel Scavenge收集器</h1>


<p>
    Parallel Scavenge收集器是一个新生代垃圾收集器，使用复制算法进行新生代的垃圾收集。同时Parallel Scavenge收集器也是个并行的
多线程收集器。Parallel Scavenge收集器的目标是达到一个可控制的吞吐量，吞吐量高可以高效率的利用CPU时间尽快完成程序运算任务，
主要适合在后台运算而不需要交互的任务。
</p>


<p>
Parallel Scavenge收集器提供两个参数-XX:MaxGCPauseMillis参数和-XX:GCTimeRatio参数设置最大垃圾收集停顿时间和设置吞吐量大小。
MaxGCpauseMillis参数可以设置为大于0的毫秒数，收集器将尽可能保证内存回收的时间不超过设定的值。GCTimeRatio参数的值是大于0且小于
100的整数，该参数设置的值是吞吐量的倒数。
</p>


<p><strong>吞吐量</strong></br>
<em>吞吐量是指CPU运行用户代码的时间与CPU消耗时间的比值，吞吐量=运行用户代码时间/（运行用户代码时间 + 垃圾收集时间）。</em></p>

<h1>Serial Old收集器</h1>


<p>
Serial Old收集器是老年代版本，他同样是一个单线程收集器，他使用“标记-整理”算法，这个收集器一般在Client模式下的虚拟机中使用。
</p>


<p>
该垃圾收集器在Server模式下的两大用途：</br>
1). 在JDK1.5之前的版本与Parallel Scavenge收集器配合使用，Parallel Scavenge垃圾收集器负责新生代垃圾收集，而Serial Old负责老年
代的垃圾收集。</br>
2). 作为CMS垃圾收集器在并发收集时Concurrent Mode Failure时使用的后备垃圾收集器。
</p>




<h1>Parallel Old收集器</h1>


<p>
    Parallel Old收集器是Parallel Scavenge收集器的老年代版本，使用多线程“标记-整理”算法。在Parallel Old收集器出现之前，新生代
垃圾收集器Parallel Scavenge只能与老年代的Serial Old收集器配合使用导致在Server端整体吞吐量不高。在Parallel Old收集器出现后可以
和Parallel Scavenge收集器配合使用提供吞吐量。
</p>




<h1>CMS收集器</h1>


<p>
CMS收集器是一款以获取最短停顿时间为目标的收集器，该收集器是基于“标记-整理”算法实现，它的运作过程中包括四个过程。他们分别是“初始
标记”、“并发标记”、“重新标记”和“并发清除”四个阶段。其中“初始标记”、“重新标记”两个阶段需要“Stop The World”。“初始标记”仅仅是标记
一下GC Root能直接关联到的对象，“并发标记”就是进行GC RootsTracing过程，而“重新标记”则是为了修正并发标记期间用户程序继续运行而导致
标记产生变动的那一部分对象标记记录。
</p>


<p><p>
CMS垃圾收集器的明显缺点：</br>
1). CMS收集器对CPU资源十分敏感，在并发阶段不会导致用户线程停顿，但是会占用一部分线程而导致应用程序变慢，总吞吐量下降。</br>
2). CMS收集器无法处理浮动垃圾，可能出现一次&#8221;Concurrent Mode Failure&#8221;失败而导致一次Full GC的产生。浮动垃圾就是CMS在“并发清理”阶段
由于用户线程还在运行，产生新垃圾。而这部分垃圾在标记过程之后，CMS无法在单次收集中处理他们，只好留到下一次GC时清理掉。</br>
3). CMS收集器基于“标记-清除”算法思想，而这意味着垃圾收集结束后会产生大量的空间碎片。
<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Virtual Machine内存分配]]></title>
    <link href="http://TuomingZheng.github.io/blog/2014/11/05/java-virtual-machinenei-cun-fen-pei/"/>
    <updated>2014-11-05T23:44:35+08:00</updated>
    <id>http://TuomingZheng.github.io/blog/2014/11/05/java-virtual-machinenei-cun-fen-pei</id>
    <content type="html"><![CDATA[<blockquote><p>Java虚拟机内存管理的两个方面是对象内存的分配和对象内存的回收，在之前的笔记中已经记录
了Java虚拟机的对象内存回收方面的基本内容。</p></blockquote>

<p>
    对象的分配主要是在Java虚拟机的堆空间进行分配，一般是分配在新生代的Eden区上，如果启动了本地线程
分配缓存，将按线程分配在TLAB上，少数情况下也可能分配在老年代上。
</p>


<h1>对象分配在Eden区上</h1>


<p>
在大多数情况下，对象在新生代Eden区分配，在Eden区没有足够的空间时虚拟机将进行一次Minor GC。在发生Minor
GC时如果Survivor没有足够的空间容纳Eden区没有被回收的对象时将直接分配到老年代。
<li>Minor GC</li>
<p>Minor GC是新生代垃圾收集动作，在新生代的Java对象大都具有朝生夕死的特点，所以Minor GC发生比较频繁。</p>
<li>Major GC</li>
<p>Major GC是老年代发生的垃圾收集动作，在老年代垃圾收集动作发生时一般伴随至少一次的Minor GC。</p>
</p>


<h1>大对象进入老年代</h1>


<p>
Java大对象指需要连续大量内存空间的Java对象，大对象容易导致内存还有不少空间时就提前触发垃圾收集来获得足够的空间
来容纳他们。Java虚拟机提供参数&#8221;-XX:PretenureSizeThreshold&#8221;指明当对象所需的内存空间大于这个值时将直接在老年代分
配。
</p>


<h1>长期存活的对象进入老年代</h1>


<p>
虚拟机给每个对象定义一个对象年龄计数器，如果对象在Eden区出生并经过第一次Minor GC后仍然存活并且能够被Survivor容纳
的话，将被移动到Survivor并且对象年龄设置为1。对象在Survivor中内经历一次Minor GC，对象年龄计数器加一，在对象年龄
计数器值到一定值时将移动到老年代。
</p>


<h1>动态对象年龄判定</h1>


<p>
如果Survivor空间中相同年龄的所有对象大小总和大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代，
无需等到MaxTenuringThreshold中要求的年龄。
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Virtual Machine内存回收机制]]></title>
    <link href="http://TuomingZheng.github.io/blog/2014/11/05/java-virtual-machinenei-cun-hui-shou-ji-zhi/"/>
    <updated>2014-11-05T23:28:56+08:00</updated>
    <id>http://TuomingZheng.github.io/blog/2014/11/05/java-virtual-machinenei-cun-hui-shou-ji-zhi</id>
    <content type="html"><![CDATA[<blockquote><p>谈起Java虚拟机就不得不提到GC，GC所要完成的事情包括确定哪些内存需要回收、什么时候回收和如何回收需要回收的内存。</p></blockquote>

<p>
    Java虚拟机内存回收主要是针对Java堆和方法区，而具有与线程同样生命周期的程序计数器、虚拟机栈和本地方法栈的内存
分配和回收具备确定性而无需过多的考虑。接下来将按照GC所要完成的事情分别整理如下：
</p>


<h1>确定需要回收的内存</h1>


<h2>Java堆需要回收的内存的确定</h2>


<p><li>引用计数法</li></p>

<p>
    引用计数法的基本思路是，给对象添加一个引用计数器，在有地方引用到该对象时计数器加一，在取消引用时该对象的引用
计数器减一，在对象的引用计数器的值为零时确定回收该对象。引用技术法思路简单，但无法很好的解决对象之间的循环引用问
题，在主流的Java虚拟机内没有采用该方法来确定需要回收的对象。
</p>


<p><li>可达性分析算法</li></p>

<p>
    可达性分析算法就是从被称为GC Root的对象开始向下搜索，搜索所经过的节点形成的路径称为引用链。如果一个对象无法
从GC Root开始搜索到，那么该对象确定可以被回收。算法的基本思路类似于图论里顶点可达性问题的求解，主流的Java虚拟机
采用该方法来确定可以被回收的对象。
</P>


<p>
    在Java语言中可以被认定为GC root的对象如下：</br>
    1. 虚拟机栈中引用的对象。</br>
    2. 方法区中类静态属性引用的对象。</br>
    3. 方法区中常量引用的对象。</br>
    4. 本地方法栈中引用的对象</br>
</p>


<p><strong>引用分类</strong></br></br>
<em>在Java虚拟机中将reference类型定义为数据中存储的数值代表的是另一块内存的起始地址。Java语言的引用分为四类，
他们分别是强引用、软引用、弱引用和虚引用。</em></br></p>

<ul>
1. 强引用，强引用还存在，对象不会被回收。</br>
2. 软引用，在系统发生内存溢出时将对象列入回收范围进行第二次回收。</br>
3. 弱引用，弱引用关联到的对象，在下一次内存回收时将会回收只被弱引用关联到的对象。</br>
4. 虚引用，虚引用的存在不对生存时间构成影响，无法通过通过虚引用取得一个对象实例。</br>
</ul>


<p><strong>对象生死</strong></br></br>
<strong>对于通过可达性判定算法确定可以回收的对象也不一定会被回收，对于通过可达性算法判定没有与GC Root相连接的引用链
的对象则会被第一次标记并且筛选是否有必要执行<code>finalize()</code>方法，如果对象没有重写<code>finalize()</code>
方法或则该方法已经被虚拟机执行过，将其视为“没有必要执行”。如果对象被判定为有必要执行<code>finzlize()</code>方法，
那么对象会被放置在F_Queue队列，在稍后将由Finalizer线程去执行并标记，如果在该方法内没有于引用链上的任何一个对象
建立关联那么对象将会被回收。</strong></p>

<h2>方法区回收的确定</h2>


<ul>
    方法区内垃圾收集主要是针对废弃常量和无用的类。如果方法区内没有其他地方引用该常量那么该常量将会被回收。对于
无用的类的判定需要确认以下几个方面：</br>
    1. 该类的实例都已经被回收了，Java堆不存在该类的实例。</br>
    2. 加载该类的ClassLoader已经被回收。</br>
    3. 该类的Class对象没有在任何地方被引用。</br>
</ul>


<h1>垃圾收集算法思想</h1>


<p><li>标记-清除算法</li></p>

<p>
    “标记-清除”算法是最基本的垃圾收集算法，整个过程分为“标记”和“清除”两个过程。首先标记所有需要回收的对象，在标记
结束后统一回收所有被标记的对象。“标记-清除”算法有两个不足之处为，标记和清除两个过程效率都不高，该算法在清除之后会
产生大量的内存碎片，空间碎片太多导致以后程序运行过程中需要分配较大的对象时需要提前触发一次垃圾收集动作。
</p>


<p><li>复制算法</li></p>

<p>
复制算法将内存分割成两个部分，每次只使用其中的一块。在当前使用的这一块内存用完时，将还存活的对象复制到另一块内存，
并回收原来的那一块空间。每次内存回收时只对部分内存空间进行回收，在内存分配时不用考虑内存碎片问题，只需要移动堆顶
指针按顺序分配内存。商业虚拟机在新生代都采用这种算法来回收新生代内存。
</p>


<p><li>标记-整理算法</li></p>

<p>
“标记-整理”算法常用在老年代内存回收，算法将整个过程分解为两个阶段。第一个阶段为“标记”过程，在该阶段标记需要被回收的
对象，在“整理”阶段将存活的对象都移动到一端，直接清理掉边界以外的内存。该算法与“标记-清除”算法的区别是在第二个阶段需
要将存活的对象整理成一块连续的内存，类似于磁盘整理技术。
</p>


<p><li>分代收集算法</li></p>

<p>
这种算法思想将根据内存对象存活周期的不同将内存划分为若干块，一般把Java堆分解为新生代和老年代，根据各个年代的不同分别
采取不同的回收算法。例如，在新生代采用“复制”算法，而在老年代采用“标记-整理”算法等。
</p>


<h1>何时回收内存</h1>


<h2>枚举根节点</h2>


<p>
可达性分析算法在确定哪些对象可以被回收时，需要保证整个内存冻结起来，需要在一个一致的内存快照上分析。这点导致了在
GC时需要停顿所有Java执行线程，如果在判定哪些对象可以被回收需要一个不漏的检查所有执行上下文和全局引用位置，那么停顿
所需的时间将会很长，在实际实现中使用称为OopMap的数据结构来快速进行可达性分析，在类加载完成的时候虚拟机将类对象内在
各个偏移量上是什么类型数据计算出来，在特定的位置记录栈和寄存器中那些位置是引用。
</p>


<h2>安全点</h2>


<p>
虚拟机没有为每条指令都生成一个OopMap数据结构，虚拟机只在称为“安全点”的位置记录这些信息，程序在执行时并非在所有地方
都可以停顿下来进行内存回收，只有在“安全点”才能停顿。“安全点”的选定以“是否具有让程序长时间执行的特征”为标准进行的，
常见的是指令序列复用（方法调用指令、循环跳转指令等）。
</p>


<p>
    GC发生时让执行线程都跑到“安全点”上停顿下来，一般来说有两个方案可供选择：</br>
    1. 抢先式中断，在GC发生时所有线程全部中断，如果有线程中断的地方不在“安全点”上则恢复线程，让其运行到“安全点”上。</br>
    2. 主动式中断，在GC时不需要直接对线程操作，简单的设置一个标志。各个线程执行时主动去轮询这个标志，发现标志为真时就
    中断自己。
</p>


<h2>安全区</h2>


<p>
    安全区是指在一段代码片段中，引用关系不会发生变化，在这个区域任何地方开始GC是安全的。安全区域是针对未处于执行状态的线程
的，线程在进入“安全区”时将标志自己进入“安全区”（这时GC检查到这个标志就不用理会这个线程了），在离开“安全区”时间检查系统是否
完成根节点的枚举，如果已经完成那么线程继续执行否则等待直到收到离开“安全区”的信号。
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Virutal Machine内存区域]]></title>
    <link href="http://TuomingZheng.github.io/blog/2014/11/05/java-virutal-machinenei-cun-qu-yu/"/>
    <updated>2014-11-05T23:19:55+08:00</updated>
    <id>http://TuomingZheng.github.io/blog/2014/11/05/java-virutal-machinenei-cun-qu-yu</id>
    <content type="html"><![CDATA[<blockquote><p>Java虚拟机自动内存管理技术使得我们不用再像使用C++那样纠结于内存分配回收问题。但是这并不意味着Java程序不存在内存泄漏问题。
而在Java程序内存泄漏时，我们必须清楚了解Java虚拟机的内存区域才能高效的解决掉内存泄漏问题和OOM问题。</p></blockquote>

<h1>Java虚拟机运行时数据区域</h1>


<p>
    Java虚拟机将Java程序运行时的内存区域划分为若干个不同类型的区域。这些区域的用途、创建时间和销毁时间都有各自的特点，有些
是与线程的生命周期紧密相关的，而有些数据区域却与进程的生命周期相关的。接下来将按照区域的创建和销毁的时间，分别罗列这些区域：
</p>




<ul>
    <h2>线程私有的内存区域</h2>
    <li>
        程序计数器
    </li>
    <p>
        程序计数器(PC)是当前线程所执行的字节码行号指示器，它是一块较小的内存区域。该内存区域为各个线程所有，每个线程的程序
        计数器互不影响对方，在切换线程执行时也将切换线程计数器。这里的程序计数器仅仅指向Java程序对应的字节码行号，在程序执行
        native代码时，程序计数器的值为空。
    </p>
    <li>Java虚拟机栈</li>
    <p>
        Java虚拟机栈也是线程私有的内存区域，每个Java方法在执行时都会在该执行线程的Java虚拟机栈内创建一个栈帧并且其push为栈
        顶元素，在方法执行结束时该栈帧pop出执行线程的Java虚拟机栈。Java方法的栈帧内包含有局部变量表、操作数栈、动态链接和
        方法返回地址等信息。
    </p>
    <p>
        Java虚拟机栈常见的异常有StackOverflowError和OutOfMemoryError两种，其中如果线程请求的栈的深度超过Java虚拟机所允许的
        最大深度将抛出StackOverflowError，程序中如果存在方法的递归调用并且无法满足递归出口条件时会导致该问题发生。如果Java
        虚拟机栈运行动态扩展的话，在Java虚拟机栈无法得到内存空间进行扩展时将会抛出OutOfMemoryError异常。
    </p>
    <li>本地方法栈</li>
    <p>
        本地方法栈与Java虚拟机栈的区别是本地方法栈是为native方法服务的，本地方法栈也有StackOverflowError和OutOfMemoryError
        两个异常情形。在一些虚拟机中甚至将Java虚拟机栈和本地方法栈合二为一。
    </p>

    <p>
        以上这些虚拟机内存区域都是线程私有的，不同的线程将拥有不同的内存区域。直观的说分配在这些区域的数据不可能被多个用户
        线程所共享，也就不存在并发同步引起的问题了。
    </p>
</ul>




<ul>
    <h2>进程所有的内存区域</h2>
    <li>Java堆</li>
    <p>
        Java堆是Java应用程序内使用空间比较大的一块内存区域，该内存区域的生命周期与进程是同步的。在虚拟机启动是创建该区域，该
        区域的目的是存放Java对象。Java堆空间可以实现为固定大小，也可以实现为可以动态扩展。实现为动态扩展时可以通过-Xmx和-Xms
        配置Java堆空间的最大值和最小值，在无法使用堆空间为Java对象分配空间时将抛出OutOfMemoryError异常。这里所讨论的Java堆空
        间只是操作系统的虚拟地址空间，对于实现虚拟内存功能的操作系统来说，给Java堆分配的物理地址空间可能是不连续的。
    </p>
    <li>方法区</li>
    <p>
        在Java虚拟机规范里将方法区列为Java堆的一部分，方法区的一个别名是Non-Heap。方法区是各个用户线程共享的内存区域，所以存储
        在该区域的数据在多线程并发时也会有同步问题。该区域用于存储被虚拟机加载的类信息、常量、静态变量和编译后形成的代码。方法
        区也不需要连续的内存空间，支持固定大小和可动态扩张两种方式，甚至可以选择不同的垃圾回收机制。该内存区域的垃圾收集主要是
        针对常量池和类型的卸载。在无法继续分配方法区空间时也将抛出OutOfMemoryError。
    </p>
    <li>运行时常量池</li>
    <p>
        运行时常量池是方法区的一部分，该区域存放的是类加载进虚拟机时class文件内的常量池，主要是编译形成的字面量和符号引用。运行
        时常量池与class文件内的常量池的区别是运行时常量池可以在程序运行期间将新的常量放入其中。运行时常量池受方法区的限制，在空
        间不够分配时也将抛出OutOfMemoryError。
    </p>
    <li>直接内存</li>
    <p>
        直接内存不是Java虚拟机运行时数据区的一部分，但这部分内存也会有OutOfMemoryError问题。这些主要是使用native函数直接分配Java
        堆外的内存，比如Java NIO。直接内存不会受Java堆的大小限制但是会受操作系统为每个进程分配的地址空间大小的限制。
    </p>
</ul>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SwipeListView源码分析之SwipeListViewTouchListener]]></title>
    <link href="http://TuomingZheng.github.io/blog/2014/11/05/swipelistviewyuan-ma-fen-xi-zhi-swipelistviewtouchlistener/"/>
    <updated>2014-11-05T23:13:25+08:00</updated>
    <id>http://TuomingZheng.github.io/blog/2014/11/05/swipelistviewyuan-ma-fen-xi-zhi-swipelistviewtouchlistener</id>
    <content type="html"><![CDATA[<blockquote><p>在分析完SwipeListView后，这个开源控件的内容也没剩下多少了。其中最重要最核心的功能模块是
SwipeListViewTouchListener的onTouch()方法，该方法处理用户的Touch事件并更新UI显示。</p></blockquote>

<p>
整个SwipeListViewTouchListener的源码剩下比较核心的东西就是<code>onTouch()</code>方法
和<code>move()</code>方法。其他的系列方法在介绍SwipeListView的时候已经都涉及了，在此不进
行赘述，主要按照用户Touch事件这个情形进行介绍。
</p>


<h1>onTouch()方法</h1>


<p><li>Down事件</li>
<img class="center" src="http://TuomingZheng.github.io/images/SwipeListTouchListener1.png"></p>

<p>该方法首先根据View的<code>getLocationOnScreen()</code>方法获取SwipeListView在屏幕上的位置，
并根据Touch事件发生的位置（在屏幕上的位置）来得到Touch事件在SwipeListView组件上发生的位置。
再则通过遍历SwipeListView的所有child组件，通过View的<code>getHitRect()</code>获取每个child
组件的点击位置来判断Touch事件发生的坐标落在该Rect内。如果Touch事件在某个Item内发生则将判断
组件是否可用，在可用的状态下将设置该Item的FrontView和BackView的事件监听是否可用，并初始化
VelocityTracker。
</p>


<p><li>Move事件</li></p>

<p><p>接下来将分段介绍Move事件的处理逻辑<p>
<img class="center" src="http://TuomingZheng.github.io/images/SwipeListTouchListener2.png">
<p>
这段代码的逻辑比较清晰，起到了校正滑动距离的作用。在该段代码里获取SwipeListView的SwipeListViewListener
监听里通过<code>onChangeSwipeMode()</code>方法内设置的mode。在mode为none时直接将移动距离设置为0，在其他
几种情况下也将移动距离设置为0。他们的情况分别是:
<ul>
1):在当前滑动的Item处于open状态时如果mode是left，而用户却继续往左滑动时将距离设置为0<br/>
2):在当前滑动的Item处于open状态时如果mode是right，而用户却继续往右滑动时将距离设置为0<br/>
3):在当前滑动的Item处于非open状态时如果mode是left，而用户却往右滑动时将距离设置为0<br/>
4):在当前距离的Item处于非open状态时如果mode是right，而用户却往左滑动时将距离设置为0<br/>
</ul>
</p>
<img class="center" src="http://TuomingZheng.github.io/images/SwipeListTouchListener3.png">
<p>
这段代码的功能是设置mSwipeCurrentAction的值，根据当前Item是否处于open状态分别设置其状态值，并回调
SwipeListViewListener的<code>onStartClose()</code>和<code>onStartOpen()</code>方法。</br>
<ul>
1): 在当前Item处于open状态时，将mSwipeCurrentAction的值设置为SWIPE_ACTION_REVEAL。</br>
2): 在当前Item处于非open状态时，如果用户往右滑动并且右滑属性设为SWIPE_ACTION_DISMISS时将mSwipeCurrentAction
设置为SWIPE_ACTION_DISMISS。</br>
3): 在当前Item处于非open状态时，如果用户往左滑动组件并且左滑属性设置为SWIPE_ACTION_DISMISS是将mSwipeCurrentAction
设置为SWIPE_ACTION_DISMISS。</br>
4): 在当前Item处于非open状态时，如果用户往右滑动组件并且右滑属性为SWIPE_ACTION_CHOICE时将mSwipeCurrentAction
设置为SWIPE_ACTION_CHOICE。</br>
5): 在当前Item处于非open状态时，如果用户往左滑动组件并且左滑属性为SWIPE_ACTION_CHOICE时将mSwipeCurrentAction设置
SWIPE_ACTION_CHOICE。</br>
6): 在当前Item处于非open状态时，除以上几个情况其他情况都将mSwipeCurrentAction设置为SWIPE_ACTION_REVEAL。
</ul>
</p>
<img class="center" src="http://TuomingZheng.github.io/images/SwipeListTouchListener4.png">
<p>
该代码片段仅仅是在当前Item处于open状态时校正deltaX值，并调用<code>move()</code>方法，关于该方法的逻辑将在下面介绍。
</p>
<li>Up事件</li>
<img class="center" src="http://TuomingZheng.github.io/images/SwipeListTouchListener5.png">
该方法先校正velocityX的值，在用户滑动距离超过Item长度一半是将转变为切换。否则根据滑动速度大小决定是否是切换状态。
接下来将调用<code>generateAnimate()</code>方法进行动画操作。
<h1>move()方法</h1>
<img class="center" src="http://TuomingZheng.github.io/images/SwipeListTouchListener6.png">
<code>move()</code>方法的代码比较简单，主要是操作BackView的可见性并设置动画。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SwipeListView源码分析之SwipeListView视图]]></title>
    <link href="http://TuomingZheng.github.io/blog/2014/11/05/swipelistviewyuan-ma-fen-xi-zhi-swipelistviewshi-tu/"/>
    <updated>2014-11-05T23:04:00+08:00</updated>
    <id>http://TuomingZheng.github.io/blog/2014/11/05/swipelistviewyuan-ma-fen-xi-zhi-swipelistviewshi-tu</id>
    <content type="html"><![CDATA[<blockquote><p>SwipeListView视图源码比较简单,SwipeListView主要起到连接用户和滑动事件处理实体的作用。其主要方法
可以归结为几个大类,属性设置系列方法、用户滑动事件回调系列方法和控制SwipeListView表现系列方法。</p></blockquote>

<p>现在将SwipeListView的几类方法描述如下：</p>


<h1>属性设置系列方法</h1>


<ul>
    <li>swipeOffsetRight属性</li>
    <p><code>setOffsetRight()</code>方法, 设置右側滑动的边距。</p>
    <li>swipeOffsetLeft属性</li>
    <p><code>setOffsetLeft()</code>方法,设置左側滑动的边距。</p>
    <li>swipeMode属性</li>
    <p><code>setSwipeMode()</code>方法，取值常量定义于SwipeListView类，SWIPE_MODE_NONE、SWIPE_MODE_BOTH、SWIPE_MODE_RIGHT、SWIPE_MODE_LEFT五个。</p>
    <li>swipeCloseAllItemsWhenMoveList属性</li>
    <p><code>setSwipeCloseAllItemsWhenMoveList()</code>方法，设置在SwipeListView上下滚动时是否关闭所有SwipeListView的组件。</p>
    <li>swipeOpenOnLongPress属性</li>
    <p><code>setSwipeOpenOnLongPress()</code>方法，设置用户在长按SwipeListView上的组件时是否打开组件（组件执行相应的操作）</p>
    <li>swipeActionLeft属性</li>
    <p><code>setSwipeActionLeft()</code>方法，设置组件左滑操作类型，取值定义于SwipeListView内。
    <code>getSwipeActionLeft()</code>方法，获取组件左滑动操作类型，取值定义于SwipeListView内。
    该属性的值分别可以设置为SWIPE_ACTION_REVEAL、SWIPE_ACTION_DISMISS、SWIPE_ACTION_CHOICE和SWIPE_ACTION_NONE。</p>
    <li>swipeActionRight属性</li>
    <p><code>setSwipeActionRight()</code>方法，设置组件右滑操作类型，取值与swipeActionLeft一样。
    <code>getSwipeActionRight()</code>方法，获取组件右滑操作类型，取值与swipeActionLeft一样。</p>
</ul>


<h1>SwipeListView控制系列方法</h1>


<p><li>SwipeListView的onInterceptTouchEvent()方法</li>
<img class="center" src="http://TuomingZheng.github.io/images/SwipeListView1.png"></p>

<p>
    该方法主要是截获用户滑动事件，在判断到用户是在垂直方向上滑动时将拦截Touch事件，此时将由SwipeListViewTouchListener的<code>onTouch()</code>
    方法进行Touch事件处理，并执行相应的动画。SwipeListViewTouchListener实现了OnTouchListsner接口，并在SwipeListView的<code>init()</code>方法内
    将其设置为SwipeListView的监听。起到关键性作用的方法是<code>checkInMoving()</code>方法，该方法通过两次Move事件的xDelta和yDeltaY进行判断用户
    是在X轴上进行滑动还是在Y轴上进行滑动，滑动距离的阈值是ViewConfiguration返回的ScaledPagingTouchSlot。
</p>


<p><li>SwipeListView的init()方法</li></p>

<p>
    该方法在SwipeListView的构造方法里调用，该方法初始化SwipeListView自定义属性的值，并将这些参数值设置到SwipeListViewTouchListener内。其中比较
    重要的是设置SwipeListView的OnTouchListener和onScrollListener监听。OnScrollListener实现在SwipeListViewTouchListener内，该监听的主要功能是控制
    在choice模式下用户滑动ListView时关闭所有的Items，在滑动时停止对用户Touch事件的处理。
</p>


<p><img class="center" src="http://TuomingZheng.github.io/images/SwipeListView2.png">
<li>SwipeListView的unselectedChoiceStates()方法</li></p>

<p>
    SwipeListView组件本身没有实现该功能而是将该实现交给SwipeListViewTouchListener类来实现。在SwipeListViewTouchListener内将遍历所有的Items并将
    他们的checked状态设置为false,在遍历到的Item在可见区域内时将根据该Item的checked状态设置该Item所属的FrontView的背景图片。
</p>


<p><img class="center" src="http://TuomingZheng.github.io/images/SwipeListView3.png">
<li>SwipeListView的setAdapter()方法</li></p>

<p>
    该方法比较简单，首先调用父类的setAdapter()方法也就是ListView的setAdapter()方法。在调用完父类的setAdapter()方法后将设置SwipeListViewTouch
    Listener内的opened、openedRight和checked三个列表的初始值。这三个列表分别表示各个Item的打开状态、右滑打开状态和checked状态，在该方法内将会
    初始化为Adapter元素个数大小。该方法接下来添加一个DataSetObserver，在数据发生变化时将动态增加opened、openedRiht和checked列表的大小。
</p>


<p><img class="center" src="http://TuomingZheng.github.io/images/SwipeListView4.png">
<li>SwipeListView的dismiss()方法</li></p>

<p>
    SwipeListView的dismiss()方法有点儿小复杂，该方法将根据参数position指定的Item是否处于可见的区域而执行不同的逻辑。在Item处于可见的区域时将
    创建一个ValueAnimator实例，并添加一个AnimatorUpdateListener监听，在该监听的回调方法内将动态控制Item的布局参数。在整个动画过程中不允许该
    组件进行任何操作。在当前Item不在可视区域内时将简单的添加一个PendingDismissData到mPendingDismisses中。最后如果当前Item在可见区域内时在动画
    结束后100ms将恢复该Item的Alpha，TranslateX等值并重新将该Item的布局参数恢复为原来的值，在这一切结束后将销毁mPendingDismisses列表。如果当前
    Item处于不可见区域时将只会简单的销毁mPendingDismisses列表。
</p>


<p><li>SwipeListView的dismissSelected()方法</li></p>

<p>
    该方法的基本原理和dismiss()方法类似，所不同的是该方法将通过SwipeListViewTouchListener遍历所有处于checked状态的Items并执行dismiss()方法同样
    的逻辑。在处理的Item列表内存在处于可见区域内的元素时，将恢复这些Item的值并销毁mPendingDismiss列表。
</p>


<p><img class="center" src="http://TuomingZheng.github.io/images/SwipeListView5.png">
<li>SwipeListView的openAnimation()方法</li></p>

<p>
    该方法将功能的实现委托给SwipeListViewTouchListener的<code>openAnimation()</code>方法来实现，该方法将获取指定position的Item的FrontView并将其
    传递给一个同名的重载方法，在判断到该Item没有处于open状态时将调用<code>generateRevealAnimate()</code>执行左滑动画操作。
</p>


<p><img class="center" src="http://TuomingZheng.github.io/images/SwipeListView6.png">
<li>SwipeListView的closeAnimate()方法</li></p>

<p>
    该方法也是调用SwipeListViewTouchListener的<code>closeAnimation()</code>方法来实现右滑恢复Item原位的操作。SwipeListViewTouchListener的方法将
    调用<code>generateRevealAnimate()</code>实现右滑恢复原位操作。

</p>


<p><li>SwipeListView的closeOpenedItems()方法</li></p>

<p>
    该方法还是通过调用SwipeListViewTouchListener的同名方法来实现对应的功能，该方法的基本思路是遍历当前可见区域内的所有Items调用closeAnimation()
    关闭所有处于opened状态的元素，也就是执行右滑恢复原位的操作。
</p>


<h1>SwipeListView用户滑动回调方法</h1>


<p><li>SwipeListView的onDismiss()方法</li></p>

<p>
    该回调方法表示那些Item元素执行了dismiss操作，将方法将事件派发给注册的SwipeListViewListener监听。<code>onDismiss()</code>方法被SwipeListViewTouch
    Listener的<code>removePendingDismisses()</code>(主要针对Item处于可见区域的情况)和swipeListView的<code>dismiss()</code>和<code>dismissSelected()
    </code>调用（这两个主要针对Item不在可见区域内的情况）。
</p>


<p><li>SwipeListView的onStartOpen()方法和onStartClose()方法</li></p>

<p>
    <code>onStartOpen()</code>方法表示指定position的Item将执行某种操作，包括左滑等操作。该方法在SwipeListViewTouchListener的<code>onTouch()
    </code>方法的Move事件内进行调用。<code>onStartClose()</code>方法表示指定position的Item将执行恢复操作，这个方法的调用也是在<code>OnTouch()
    </code>方法的Move事件内。Move事件控制调用<code>onStartOpen()</code>还是<code>onStartClose()</code>方法是由当前Item是否处于opened状态决定的。

</p>


<p><li>SwipeListView的onClickFrontView()方法和onClickBackView()方法</li></p>

<p>
    <code>onClickFrontView()</code>表示用户点击Item的FrontView，<code>onClickBackView()</code>方法表示用户点击Item的BackView。这两个方法没有什么
    可以多加介绍的。
</p>


<p><li>SwipeListView的onOpened()方法和onClosed()方法</li></p>

<p>
    <code>onOpened()</code>方法表示指定position的Item已经处于opened状态（滑动、渐隐等）并且是否是右滑的。而<code>onClosed()</code>方法表示指定
    position的Item是否处于非opened状态（恢复）。这两个方法都是在SwipeListViewTouchListener的<code>generateRevealAnimate()</code>方法内的动画结束
    回调。
</p>


<p><li>onChoiceStarted()、onChoiceEnded()和onChoiceChanged()方法</li></p>

<p>
    <code>onChoiceStarted()</code>在第一次出现Item被checked的时候调用、方法<code>onChoiceEnded()</code>在最后一个Item的checked状态变为false时调用。
    <code>onChoiceChanged()</code>在每一次有Item的checked状态发生变化时调用。所有这些方法在SwipeListViewTouchListener的swapChoiceState()方法内调用。
</p>


<p><li>onFirstListItem()、onLastListItem()和onListChanged()</li></p>

<p>
    <code>onFirstListItem()</code>和<code>onLastListItem()</code>在OnScrollListener的<code>onScroll()</code>方法调用。他们分别在第一个Item可见和最后
    一个Item可见时调用。<code>onListChanged()</code>方法在SwipeListView的<code>setAdapter()</code>方法内的数据监听器的回调中调用。
</p>


<p><li>SwipeListView的move()方法</li></p>

<p>
    <code>move()</code>方法在SwipeListViewTouchListener的<code>onTouch()</code>方法的Move事件内调用，用来通知监听器指定的Item在滑动，并且可以获得
    该Item的滑动距离。
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android开源组件之SwipeListView]]></title>
    <link href="http://TuomingZheng.github.io/blog/2014/11/05/androidkai-yuan-zu-jian-zhi-swipelistview/"/>
    <updated>2014-11-05T22:56:57+08:00</updated>
    <id>http://TuomingZheng.github.io/blog/2014/11/05/androidkai-yuan-zu-jian-zhi-swipelistview</id>
    <content type="html"><![CDATA[<blockquote><p><p>SwipeListView是最近比较火的一个开源组件，用于实现ListView元素側滑的功能。SwipeListView的使用还是比较简单的。</p></p></blockquote>

<h1>自定义属性</h1>


<p>首先需要认识SwipeListView的几个自定义属性，他们定义在swipelistview__attrs.xml文件内。</p>


<pre><code>    &lt;declare-styleable name="SwipeListView"&gt;
        &lt;attr name="swipeOpenOnLongPress" format="boolean" /&gt;
        &lt;attr name="swipeAnimationTime" format="integer" /&gt;
        &lt;attr name="swipeOffsetLeft" format="dimension" /&gt;
        &lt;attr name="swipeOffsetRight" format="dimension" /&gt;
        &lt;attr name="swipeCloseAllItemsWhenMoveList" format="boolean" /&gt;
        &lt;attr name="swipeFrontView" format="reference" /&gt;
        &lt;attr name="swipeBackView" format="reference" /&gt;
        &lt;attr name="swipeMode" format="enum"&gt;
            &lt;enum name="none" value="0" /&gt;
            &lt;enum name="both" value="1" /&gt;
            &lt;enum name="right" value="2" /&gt;
            &lt;enum name="left" value="3" /&gt;
        &lt;/attr&gt;
        &lt;attr name="swipeActionLeft" format="enum"&gt;
            &lt;enum name="reveal" value="0" /&gt;
            &lt;enum name="dismiss" value="1" /&gt;
            &lt;enum name="choice" value="2" /&gt;
        &lt;/attr&gt;
        &lt;attr name="swipeActionRight" format="enum"&gt;
            &lt;enum name="reveal" value="0" /&gt;
            &lt;enum name="dismiss" value="1" /&gt;
            &lt;enum name="choice" value="2" /&gt;
        &lt;/attr&gt;
        &lt;attr name="swipeDrawableChecked" format="reference" /&gt;
        &lt;attr name="swipeDrawableUnchecked" format="reference" /&gt;
    &lt;/declare-styleable&gt;
</code></pre>

<p>SwipeListView自定义属性具体说明如下：</p>


<ul>
    <li>第一个属性swipeOpenOnLongPress表示当前的SwipeListView是否支持长按某个元素进行滑动或则切换操作，他的取值为布尔类型。</li>
    <li>第二个属性swipeAnimationTime用来设置SwipeListView元素側滑或则进行checked状态切换的动画时间，如果不设置该属性的值SwipeListViewTouchListener
        会将其设置为Android系统内的标准动画时间（short类型）。</li>
    <li>第三个属性swipeOffsetLeft用于设置SwipeListView左滑停止后裸露在可见区域内的长度。</li>
    <li>第四个属性swipeOffsetRight为SwipeListView右滑动停止后裸露在可见区域内的长度。</li>
    <li>第五个属性swipeFrontView和swipeBackView分别指定swipeListView在滑动是处于前台和后台的组件。</li>
    <li>第六个属性swipeMode用于设置SwipeListView的滑动方向，其类型为枚举类型，分别可以取值为left(向左)、right（向右）、both（双向）和none(滑不动)。</li>
    <li>第七个属性swipeActionLeft和swipeActionRight分别用于指示SwipeListView左滑动和右滑动是的行为，其中reveal为FronView可见平滑滑动，
        dismiss为FrontView平滑滑动并伴随ListView元素alpha的渐变，最后choice取值则指定了FrontView滑动是切换checked状态值。</li>
    <li>最后一组属性swipeDrawableChecked和swipeDrawableUnchecked只有在mode取值为checked时有效，分别设置SwipeListView的元素在checked状态下的背景图片。</li>
</ul>




<h2>使用示例</h2>


<p></p>

<p>具体在使用SwipeListView时只需要配置这几个属性值即可，在SwipeListView中也实现了代码设置对应属性的方法。其他的用法和ListView大同小异，唯一需要注意的是
SwipeListView对应的Adapter的Item布局必须实现FrontView和BackView并且FrontView最好罩在BackView之上。</p>


<p><li>SwipeListView在Activity布局文件内的声明：</li></p>

<pre><code>        &lt;com.fortysevendeg.swipelistview.SwipeListView
            android:id="@+id/swipelistview"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            SwipeListView:swipeActionLeft="reveal"
            SwipeListView:swipeActionRight="reveal"
            SwipeListView:swipeAnimationTime="@android:integer/config_shortAnimTime"
            SwipeListView:swipeBackView="@+id/back_item"
            SwipeListView:swipeCloseAllItemsWhenMoveList="false"
            SwipeListView:swipeDrawableChecked="@drawable/address_check_d"
            SwipeListView:swipeDrawableUnchecked="@drawable/address_check"
            SwipeListView:swipeFrontView="@+id/front_item"
            SwipeListView:swipeMode="left"
            SwipeListView:swipeOffsetLeft="10dp"
            SwipeListView:swipeOffsetRight="10dp"
            SwipeListView:swipeOpenOnLongPress="false"
            android:divider="#FF0000" &gt;
        &lt;/com.fortysevendeg.swipelistview.SwipeListView&gt;
</code></pre>

<p><li> SwipeListView对应的Adapter的元素的布局：</li>
                &lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
                <FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
                        android:layout_width="match_parent"
                        android:layout_height="200dp" ></p>

<pre><code>                    &lt;RelativeLayout
                            android:id="@+id/back_item"
                            android:layout_width="match_parent"
                            android:layout_height="200dp" &gt;

                        &lt;Button
                            android:id="@+id/delete_button"
                            android:layout_width="wrap_content"
                            android:layout_height="wrap_content"
                            android:layout_alignParentRight="true"
                            android:text="Delete" /&gt;
                    &lt;/RelativeLayout&gt;


                    &lt;RelativeLayout
                            android:id="@+id/front_item"
                            android:layout_width="match_parent"
                            android:layout_height="200dp"
                            android:background="#FF0000FF" &gt;

                            &lt;ImageView
                                android:id="@+id/account_icon_view"
                                android:layout_width="wrap_content"
                                android:layout_height="wrap_content"
                                android:layout_alignParentLeft="true"
                                android:layout_centerVertical="true"
                                android:layout_marginLeft="5dp"
                                android:layout_marginRight="5dp"
                                android:background="@null"
                                android:src="@drawable/ic_launcher" /&gt;

                            &lt;TextView
                                android:id="@+id/account_time_view"
                                android:layout_width="wrap_content"
                                android:layout_height="wrap_content"
                                android:layout_alignParentRight="true"
                                android:layout_centerVertical="true"
                                android:gravity="center"
                                android:paddingLeft="5dp"
                                android:paddingRight="5dp"
                                android:textSize="18sp" /&gt;

                            &lt;TextView
                                android:id="@+id/account_name_view"
                                android:layout_width="match_parent"
                                android:layout_height="wrap_content"
                                android:layout_toLeftOf="@id/account_time_view"
                                android:layout_toRightOf="@id/account_icon_view"
                                android:gravity="center"
                                android:textSize="18sp" /&gt;

                            &lt;TextView
                                android:id="@+id/account_id_view"
                                android:layout_width="match_parent"
                                android:layout_height="wrap_content"
                                android:layout_below="@id/account_name_view"
                                android:layout_toLeftOf="@id/account_time_view"
                                android:layout_toRightOf="@id/account_icon_view"
                                android:gravity="center"
                                android:textSize="18sp" /&gt;
                    &lt;/RelativeLayout&gt;

            &lt;/FrameLayout&gt;
</code></pre>

<p><li>注意事项：</li></p>

<p>在SwipeListView的Adapter元素的布局内必须实现SwipeListView的自定义属性frontView和backView，并且最好将frontView覆盖在backview是以实现滑动时backView渐显效果。
SwipeListView比较恶心的地方是监听器SwipeListViewListener内的<code>onChangeSwipeMode()</code>方法必须返回在activity布局文件内声明的action类型。</p>


<p><img class="left" src="http://TuomingZheng.github.io/images/SwipeList.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell命令之压缩与解压]]></title>
    <link href="http://TuomingZheng.github.io/blog/2014/11/05/shellming-ling-zhi-ya-suo-yu-jie-ya/"/>
    <updated>2014-11-05T01:42:59+08:00</updated>
    <id>http://TuomingZheng.github.io/blog/2014/11/05/shellming-ling-zhi-ya-suo-yu-jie-ya</id>
    <content type="html"><![CDATA[<blockquote><p>Linux系统不以文件的扩展名区分文件，但是我们常常在Linux上看到诸如.gz、.bz2、.Z和.tar.bz2等文件扩展名的文件。
其实这些压缩文件的扩展名仅仅是为了便于用户识别该压缩文件是以哪一种压缩软件进行压缩的。</p></blockquote>

<h1>概述</h1>


<p>
在Linux上常用的压缩与解压命令有gzip、bzip2和compress。tar命令本身是对多个文件进行打包操作，但是用户在Linux系统上常常使  
tar命令携带特定的参数在打包的同时进行压缩处理。
</p>




<p>
下面将逐一介绍常用的压缩与解压命令，他们分别是：
</p>




<h1>gzip命令</h1>


<p><p>
gzip [-cdtv#] 待处理文件名<br/>
-c 将压缩数据输出到标准输出流，该参数经常配合数据流重定向使用<br/>
-d 解压指定的压缩文件，该压缩文件只能是使用gzip或则compress压缩形成的压缩文件<br/>
-t 用来检验指定的压缩文件的一致性，查看压缩文件是否有错误<br/>
-v 在压缩过程中显示压缩比等信息<br/>
-# #代表数字-1到-9，数字代表压缩等级其中-1等级压缩最快但压缩比最差</p>

<pre><code>    例子：   $ cp /etc/man.config .      &lt;&lt;== 将etc目录下的man.config文件拷贝到当前目录  
            $ gzip -v man.config        &lt;&lt;== 压缩当前目录下的man.config文件，生成man.config.gz文件  
                                        &lt;&lt;== 在生成压缩文件后man.config将消失  
            $ gzip -d man.config.gz     &lt;&lt;== 将当前目录下的man.config.gz文件解压，该操作将在当前目录  
                                        &lt;&lt;== 下生成man.config文件，同时压缩文件将消失  
            $ gzip -c man.config &gt; man.config.gz    &lt;&lt;== 使用数据流重定向技术，在当前目录下生成压缩  
                                                    &lt;&lt;== 文件同时原文件依然存在
            $ zcat man.config.gz        &lt;&lt;== 该命令用于查看gzip压缩文件，当时压缩文件对应的原文件必须  
                                        &lt;&lt;=  是纯文本文件  
</code></pre>

<p></p>
<h1>bzip2命令</h1>
<p>
bzip2 [-cdkvz#] 待处理文件名<br/>
-c 将压缩数据输出到标志输出流，一般配合数据流重定向使用<br/>
-d 解压指定的压缩文件，该压缩文件一般是gzip压缩文件<br/>
-k 压缩过程中保留原文件，即不删除原文件<br/>
-v 显示压缩过程中的诸如压缩比等信息
-z 将指定的文件使用gzip进行压缩处理<br/>
-# #代表数组-1到-9, 数字同样是压缩等级，其中-1的最快当压缩比最差</p>

<pre><code>    例子：       $ cp /etc/manpath.config .      &lt;&lt;== 将etc目录下的manpath.config文件拷贝到当前目录  
                $ bzip2 -z manpath.config       &lt;&lt;== 使用bzip2压缩文件，压缩后将形成manpath.config
                                                     .bz2  文件，但是manpath.config将消失  
                $ bzip2 -d manpath.config.bz2   &lt;&lt;== 解压当前目录下的压缩文件，在解压后将生成
                                                     manpath.config文件，但是原来的压缩文件将消失  
                $ bzip2 -c manpath.config &gt; manpath.config.bz2      &lt;&lt;== 使用数据流重定下技术压缩
                                                                    &lt;&lt;== manpath.config文件，将生
                                                                    &lt;&lt;== 成指定名字的压缩文件同时
                                                                    &lt;&lt;== 原文件将继续存在  

                $ rm -f manpath.config,bz2  
                $ bzip2 -k manpath.config       &lt;&lt;== 该命令的作用与上一条压缩命令相同  
                $ bzcat manpath.config.bz2      &lt;&lt;== 使用bzcat命令查看压缩文件  
</code></pre>

<p></p>
<h1>compress命令与uncompress命令</h1>
<p>
<li>compress [-rcv] 待处理文件名称  </li>
-r 将目录下的文件一并进行压缩处理<br/>
-c 将压缩数据输出到标准输出流上<br/>
-v 显示压缩过程中的信息</p>

<p><li>uncompress 压缩文件（该压缩文件一般移.Z作为扩展名）</li></p>

<pre><code>    例子：   $ cp /etc/manpath.config .  &lt;&lt;== 将etc下的manpath.config文件拷贝的当前目录  
            $ compress manpath.config   &lt;&lt;== 将采用compress压缩manpath.config文件并在当前  
                                        &lt;&lt;== 目录下生成maptah.config.Z文件（不保留原文件）  
            $ uncompress manpath.config.Z   &lt;&lt;== 解压maptah.config.Z文件(不保留原文件)  
</code></pre>

<p>其实compress命令在现在的Linux上使用并不多，最常用的还是gzip和bzip2两个命令。其中compress命令的压缩比最差，bzip2命令的压缩比最好。
</p>
<h1>tar命令</h1>
<p>下面我们将分别介绍使用tar命令压缩、解压、打包、解打包和查看的用法。</p>
<li>打包、压缩文件: tar [-j|-z] [cv] [-f 处理后生成的文件名]  待处理文件名</li>
<li>查看文件: tar [-j|-z] [tv] [-f 待查看的文件]</li>
<li>解压、解打包: tar [-j|-z] [xv] [-f 待处理文件名]  [-C 目标目录]</li></p>

<p>参数说明：</br>  <br/>
-c 打包指定的文件（目录）<br/>
-t 查看打包文件内有那些文件<br/>
-x 解打包指定文件、配合-C参数实现解打包到指定目录下<br/>
-j 使用bzip2进行压缩或则解压，一般与-c配合表示打包并压缩文件。与-x配合表示解打包并解压指定文件<br/>
-z 使用gzip进行压缩或则解压，使用情况与-j类似<br/>
-v 显示处理过程中的信息 (文件名)<br/>
-f 该参数后面一般携带最终生成的文件<br/>
-C 指定解打包后生成文件的位置<br/>
-p 小写字母p代表打包过程中保留原文件的权限属性<br/>
-P 大写字母P代表保留原文件的绝对路径<br/>
&ndash;exclude=filename  打包过程中不处理指定的文件</p>

<pre><code>    例子：       $ tar -jpcv -f ./etc.tar.bz2 /etc   &lt;&lt;== 将etc目录打包并使有bzip2进行压缩，
                                                        同时保留原来文件的权限属性  
                $ tar -jtv -f etc.tar.bz2           &lt;&lt;== 查看包etc.tar.bz2内的文件情况  
                $ tar -jxv -f etc.tar.bz2 -C /tmp   &lt;&lt;== 将包etc.tar.bz2解压缩到/tmp目录  
                $ tar -jpcv -f etc.tar.bz2 /etc  
                $ tar -jxv -f etc.tar.bz2 /etc/passwd   &lt;&lt;== 仅仅解压包etc.tar.bz2内的passwd文件 
                $ tar -jtv -f etc.tar.bz2 --exclude=/etc/passwd /etc    &lt;&lt;== 将etc目录打包并使用  
                                                                        &lt;&lt;== bzip2压缩但是不包括  
                                                                        &lt;&lt;== /etc/passwd文件  
</code></pre>

<p>在Linux系统上我们经常看到tarfile和tarball名词，他们的具体区别是tarfile是使用tar命令进行打包并且没有使用压缩参数, 而tarball则是使用tar命令并且进行了压缩处理。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My first blog]]></title>
    <link href="http://TuomingZheng.github.io/blog/2014/11/05/my-first-blog/"/>
    <updated>2014-11-05T01:14:10+08:00</updated>
    <id>http://TuomingZheng.github.io/blog/2014/11/05/my-first-blog</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
