---
layout: post
title: "Java Virtual Machine内存回收机制"
date: 2014-11-05 23:28:56 +0800
comments: true
categories: Java虚拟机学习笔记
---
>谈起Java虚拟机就不得不提到GC，GC所要完成的事情包括确定哪些内存需要回收、什么时候回收和如何回收需要回收的内存。
<p>
	Java虚拟机内存回收主要是针对Java堆和方法区，而具有与线程同样生命周期的程序计数器、虚拟机栈和本地方法栈的内存
分配和回收具备确定性而无需过多的考虑。接下来将按照GC所要完成的事情分别整理如下：
</p>
<h1>确定需要回收的内存</h1>
<h2>Java堆需要回收的内存的确定</h2>
<li>引用计数法</li>
<p>
	引用计数法的基本思路是，给对象添加一个引用计数器，在有地方引用到该对象时计数器加一，在取消引用时该对象的引用
计数器减一，在对象的引用计数器的值为零时确定回收该对象。引用技术法思路简单，但无法很好的解决对象之间的循环引用问
题，在主流的Java虚拟机内没有采用该方法来确定需要回收的对象。
</p>
<li>可达性分析算法</li>
<p>
	可达性分析算法就是从被称为GC Root的对象开始向下搜索，搜索所经过的节点形成的路径称为引用链。如果一个对象无法
从GC Root开始搜索到，那么该对象确定可以被回收。算法的基本思路类似于图论里顶点可达性问题的求解，主流的Java虚拟机
采用该方法来确定可以被回收的对象。
</P>
<p>
	在Java语言中可以被认定为GC root的对象如下：</br>
	1. 虚拟机栈中引用的对象。</br>
	2. 方法区中类静态属性引用的对象。</br>
	3. 方法区中常量引用的对象。</br>
	4. 本地方法栈中引用的对象</br>
</p>
**引用分类**</br></br>
*在Java虚拟机中将reference类型定义为数据中存储的数值代表的是另一块内存的起始地址。Java语言的引用分为四类，
他们分别是强引用、软引用、弱引用和虚引用。*</br>

<ul>
1. 强引用，强引用还存在，对象不会被回收。</br>
2. 软引用，在系统发生内存溢出时将对象列入回收范围进行第二次回收。</br>
3. 弱引用，弱引用关联到的对象，在下一次内存回收时将会回收只被弱引用关联到的对象。</br>
4. 虚引用，虚引用的存在不对生存时间构成影响，无法通过通过虚引用取得一个对象实例。</br>
</ul>
**对象生死**</br></br>
**对于通过可达性判定算法确定可以回收的对象也不一定会被回收，对于通过可达性算法判定没有与GC Root相连接的引用链
的对象则会被第一次标记并且筛选是否有必要执行<code>finalize()</code>方法，如果对象没有重写<code>finalize()</code>
方法或则该方法已经被虚拟机执行过，将其视为“没有必要执行”。如果对象被判定为有必要执行<code>finzlize()</code>方法，
那么对象会被放置在F_Queue队列，在稍后将由Finalizer线程去执行并标记，如果在该方法内没有于引用链上的任何一个对象
建立关联那么对象将会被回收。**
<h2>方法区回收的确定</h2>
<ul>
	方法区内垃圾收集主要是针对废弃常量和无用的类。如果方法区内没有其他地方引用该常量那么该常量将会被回收。对于
无用的类的判定需要确认以下几个方面：</br>
	1. 该类的实例都已经被回收了，Java堆不存在该类的实例。</br>
	2. 加载该类的ClassLoader已经被回收。</br>
	3. 该类的Class对象没有在任何地方被引用。</br>
</ul>
<h1>垃圾收集算法思想</h1>
<li>标记-清除算法</li>
<p>
	“标记-清除”算法是最基本的垃圾收集算法，整个过程分为“标记”和“清除”两个过程。首先标记所有需要回收的对象，在标记
结束后统一回收所有被标记的对象。“标记-清除”算法有两个不足之处为，标记和清除两个过程效率都不高，该算法在清除之后会
产生大量的内存碎片，空间碎片太多导致以后程序运行过程中需要分配较大的对象时需要提前触发一次垃圾收集动作。
</p>
<li>复制算法</li>
<p>
复制算法将内存分割成两个部分，每次只使用其中的一块。在当前使用的这一块内存用完时，将还存活的对象复制到另一块内存，
并回收原来的那一块空间。每次内存回收时只对部分内存空间进行回收，在内存分配时不用考虑内存碎片问题，只需要移动堆顶
指针按顺序分配内存。商业虚拟机在新生代都采用这种算法来回收新生代内存。
</p>
<li>标记-整理算法</li>
<p>
“标记-整理”算法常用在老年代内存回收，算法将整个过程分解为两个阶段。第一个阶段为“标记”过程，在该阶段标记需要被回收的
对象，在“整理”阶段将存活的对象都移动到一端，直接清理掉边界以外的内存。该算法与“标记-清除”算法的区别是在第二个阶段需
要将存活的对象整理成一块连续的内存，类似于磁盘整理技术。
</p>
<li>分代收集算法</li>
<p>
这种算法思想将根据内存对象存活周期的不同将内存划分为若干块，一般把Java堆分解为新生代和老年代，根据各个年代的不同分别
采取不同的回收算法。例如，在新生代采用“复制”算法，而在老年代采用“标记-整理”算法等。
</p>
<h1>何时回收内存</h1>
<h2>枚举根节点</h2>
<p>
可达性分析算法在确定哪些对象可以被回收时，需要保证整个内存冻结起来，需要在一个一致的内存快照上分析。这点导致了在
GC时需要停顿所有Java执行线程，如果在判定哪些对象可以被回收需要一个不漏的检查所有执行上下文和全局引用位置，那么停顿
所需的时间将会很长，在实际实现中使用称为OopMap的数据结构来快速进行可达性分析，在类加载完成的时候虚拟机将类对象内在
各个偏移量上是什么类型数据计算出来，在特定的位置记录栈和寄存器中那些位置是引用。
</p>
<h2>安全点</h2>
<p>
虚拟机没有为每条指令都生成一个OopMap数据结构，虚拟机只在称为“安全点”的位置记录这些信息，程序在执行时并非在所有地方
都可以停顿下来进行内存回收，只有在“安全点”才能停顿。“安全点”的选定以“是否具有让程序长时间执行的特征”为标准进行的，
常见的是指令序列复用（方法调用指令、循环跳转指令等）。
</p>
<p>
	GC发生时让执行线程都跑到“安全点”上停顿下来，一般来说有两个方案可供选择：</br>
	1. 抢先式中断，在GC发生时所有线程全部中断，如果有线程中断的地方不在“安全点”上则恢复线程，让其运行到“安全点”上。</br>
	2. 主动式中断，在GC时不需要直接对线程操作，简单的设置一个标志。各个线程执行时主动去轮询这个标志，发现标志为真时就
	中断自己。
</p>
<h2>安全区</h2>
<p>
	安全区是指在一段代码片段中，引用关系不会发生变化，在这个区域任何地方开始GC是安全的。安全区域是针对未处于执行状态的线程
的，线程在进入“安全区”时将标志自己进入“安全区”（这时GC检查到这个标志就不用理会这个线程了），在离开“安全区”时间检查系统是否
完成根节点的枚举，如果已经完成那么线程继续执行否则等待直到收到离开“安全区”的信号。
</p>
