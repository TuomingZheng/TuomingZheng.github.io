<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android应用层开发笔记 | 郑拓铭博客]]></title>
  <link href="http://TuomingZheng.github.io/blog/categories/androidying-yong-ceng-kai-fa-bi-ji/atom.xml" rel="self"/>
  <link href="http://TuomingZheng.github.io/"/>
  <updated>2014-11-06T23:26:04+08:00</updated>
  <id>http://TuomingZheng.github.io/</id>
  <author>
    <name><![CDATA[TuomingZheng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SwipeListView源码分析之SwipeListViewTouchListener]]></title>
    <link href="http://TuomingZheng.github.io/blog/2014/11/05/swipelistviewyuan-ma-fen-xi-zhi-swipelistviewtouchlistener/"/>
    <updated>2014-11-05T23:13:25+08:00</updated>
    <id>http://TuomingZheng.github.io/blog/2014/11/05/swipelistviewyuan-ma-fen-xi-zhi-swipelistviewtouchlistener</id>
    <content type="html"><![CDATA[<blockquote><p>在分析完SwipeListView后，这个开源控件的内容也没剩下多少了。其中最重要最核心的功能模块是
SwipeListViewTouchListener的onTouch()方法，该方法处理用户的Touch事件并更新UI显示。</p></blockquote>

<p>
整个SwipeListViewTouchListener的源码剩下比较核心的东西就是<code>onTouch()</code>方法
和<code>move()</code>方法。其他的系列方法在介绍SwipeListView的时候已经都涉及了，在此不进
行赘述，主要按照用户Touch事件这个情形进行介绍。
</p>


<h1>onTouch()方法</h1>


<p><li>Down事件</li>
<img class="center" src="/images/SwipeListTouchListener1.png"></p>

<p>该方法首先根据View的<code>getLocationOnScreen()</code>方法获取SwipeListView在屏幕上的位置，
并根据Touch事件发生的位置（在屏幕上的位置）来得到Touch事件在SwipeListView组件上发生的位置。
再则通过遍历SwipeListView的所有child组件，通过View的<code>getHitRect()</code>获取每个child
组件的点击位置来判断Touch事件发生的坐标落在该Rect内。如果Touch事件在某个Item内发生则将判断
组件是否可用，在可用的状态下将设置该Item的FrontView和BackView的事件监听是否可用，并初始化
VelocityTracker。
</p>


<p><li>Move事件</li></p>

<p><p>接下来将分段介绍Move事件的处理逻辑<p>
<img class="center" src="/images/SwipeListTouchListener2.png">
<p>
这段代码的逻辑比较清晰，起到了校正滑动距离的作用。在该段代码里获取SwipeListView的SwipeListViewListener
监听里通过<code>onChangeSwipeMode()</code>方法内设置的mode。在mode为none时直接将移动距离设置为0，在其他
几种情况下也将移动距离设置为0。他们的情况分别是:
<ul>
1):在当前滑动的Item处于open状态时如果mode是left，而用户却继续往左滑动时将距离设置为0<br/>
2):在当前滑动的Item处于open状态时如果mode是right，而用户却继续往右滑动时将距离设置为0<br/>
3):在当前滑动的Item处于非open状态时如果mode是left，而用户却往右滑动时将距离设置为0<br/>
4):在当前距离的Item处于非open状态时如果mode是right，而用户却往左滑动时将距离设置为0<br/>
</ul>
</p>
<img class="center" src="/images/SwipeListTouchListener3.png">
<p>
这段代码的功能是设置mSwipeCurrentAction的值，根据当前Item是否处于open状态分别设置其状态值，并回调
SwipeListViewListener的<code>onStartClose()</code>和<code>onStartOpen()</code>方法。</br>
<ul>
1): 在当前Item处于open状态时，将mSwipeCurrentAction的值设置为SWIPE_ACTION_REVEAL。</br>
2): 在当前Item处于非open状态时，如果用户往右滑动并且右滑属性设为SWIPE_ACTION_DISMISS时将mSwipeCurrentAction
设置为SWIPE_ACTION_DISMISS。</br>
3): 在当前Item处于非open状态时，如果用户往左滑动组件并且左滑属性设置为SWIPE_ACTION_DISMISS是将mSwipeCurrentAction
设置为SWIPE_ACTION_DISMISS。</br>
4): 在当前Item处于非open状态时，如果用户往右滑动组件并且右滑属性为SWIPE_ACTION_CHOICE时将mSwipeCurrentAction
设置为SWIPE_ACTION_CHOICE。</br>
5): 在当前Item处于非open状态时，如果用户往左滑动组件并且左滑属性为SWIPE_ACTION_CHOICE时将mSwipeCurrentAction设置
SWIPE_ACTION_CHOICE。</br>
6): 在当前Item处于非open状态时，除以上几个情况其他情况都将mSwipeCurrentAction设置为SWIPE_ACTION_REVEAL。
</ul>
</p>
<img class="center" src="/images/SwipeListTouchListener4.png">
<p>
该代码片段仅仅是在当前Item处于open状态时校正deltaX值，并调用<code>move()</code>方法，关于该方法的逻辑将在下面介绍。
</p>
<li>Up事件</li>
<img class="center" src="/images/SwipeListTouchListener5.png">
该方法先校正velocityX的值，在用户滑动距离超过Item长度一半是将转变为切换。否则根据滑动速度大小决定是否是切换状态。
接下来将调用<code>generateAnimate()</code>方法进行动画操作。
<h1>move()方法</h1>
<img class="center" src="/images/SwipeListTouchListener6.png">
<code>move()</code>方法的代码比较简单，主要是操作BackView的可见性并设置动画。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SwipeListView源码分析之SwipeListView视图]]></title>
    <link href="http://TuomingZheng.github.io/blog/2014/11/05/swipelistviewyuan-ma-fen-xi-zhi-swipelistviewshi-tu/"/>
    <updated>2014-11-05T23:04:00+08:00</updated>
    <id>http://TuomingZheng.github.io/blog/2014/11/05/swipelistviewyuan-ma-fen-xi-zhi-swipelistviewshi-tu</id>
    <content type="html"><![CDATA[<blockquote><p>SwipeListView视图源码比较简单,SwipeListView主要起到连接用户和滑动事件处理实体的作用。其主要方法
可以归结为几个大类,属性设置系列方法、用户滑动事件回调系列方法和控制SwipeListView表现系列方法。</p></blockquote>

<p>现在将SwipeListView的几类方法描述如下：</p>


<h1>属性设置系列方法</h1>


<ul>
    <li>swipeOffsetRight属性</li>
    <p><code>setOffsetRight()</code>方法, 设置右側滑动的边距。</p>
    <li>swipeOffsetLeft属性</li>
    <p><code>setOffsetLeft()</code>方法,设置左側滑动的边距。</p>
    <li>swipeMode属性</li>
    <p><code>setSwipeMode()</code>方法，取值常量定义于SwipeListView类，SWIPE_MODE_NONE、SWIPE_MODE_BOTH、SWIPE_MODE_RIGHT、SWIPE_MODE_LEFT五个。</p>
    <li>swipeCloseAllItemsWhenMoveList属性</li>
    <p><code>setSwipeCloseAllItemsWhenMoveList()</code>方法，设置在SwipeListView上下滚动时是否关闭所有SwipeListView的组件。</p>
    <li>swipeOpenOnLongPress属性</li>
    <p><code>setSwipeOpenOnLongPress()</code>方法，设置用户在长按SwipeListView上的组件时是否打开组件（组件执行相应的操作）</p>
    <li>swipeActionLeft属性</li>
    <p><code>setSwipeActionLeft()</code>方法，设置组件左滑操作类型，取值定义于SwipeListView内。
    <code>getSwipeActionLeft()</code>方法，获取组件左滑动操作类型，取值定义于SwipeListView内。
    该属性的值分别可以设置为SWIPE_ACTION_REVEAL、SWIPE_ACTION_DISMISS、SWIPE_ACTION_CHOICE和SWIPE_ACTION_NONE。</p>
    <li>swipeActionRight属性</li>
    <p><code>setSwipeActionRight()</code>方法，设置组件右滑操作类型，取值与swipeActionLeft一样。
    <code>getSwipeActionRight()</code>方法，获取组件右滑操作类型，取值与swipeActionLeft一样。</p>
</ul>


<h1>SwipeListView控制系列方法</h1>


<p><li>SwipeListView的onInterceptTouchEvent()方法</li>
<img class="center" src="/images/SwipeListView1.png"></p>

<p>
    该方法主要是截获用户滑动事件，在判断到用户是在垂直方向上滑动时将拦截Touch事件，此时将由SwipeListViewTouchListener的<code>onTouch()</code>
    方法进行Touch事件处理，并执行相应的动画。SwipeListViewTouchListener实现了OnTouchListsner接口，并在SwipeListView的<code>init()</code>方法内
    将其设置为SwipeListView的监听。起到关键性作用的方法是<code>checkInMoving()</code>方法，该方法通过两次Move事件的xDelta和yDeltaY进行判断用户
    是在X轴上进行滑动还是在Y轴上进行滑动，滑动距离的阈值是ViewConfiguration返回的ScaledPagingTouchSlot。
</p>


<p><li>SwipeListView的init()方法</li></p>

<p>
    该方法在SwipeListView的构造方法里调用，该方法初始化SwipeListView自定义属性的值，并将这些参数值设置到SwipeListViewTouchListener内。其中比较
    重要的是设置SwipeListView的OnTouchListener和onScrollListener监听。OnScrollListener实现在SwipeListViewTouchListener内，该监听的主要功能是控制
    在choice模式下用户滑动ListView时关闭所有的Items，在滑动时停止对用户Touch事件的处理。
</p>


<p><img class="center" src="/images/SwipeListView2.png">
<li>SwipeListView的unselectedChoiceStates()方法</li></p>

<p>
    SwipeListView组件本身没有实现该功能而是将该实现交给SwipeListViewTouchListener类来实现。在SwipeListViewTouchListener内将遍历所有的Items并将
    他们的checked状态设置为false,在遍历到的Item在可见区域内时将根据该Item的checked状态设置该Item所属的FrontView的背景图片。
</p>


<p><img class="center" src="/images/SwipeListView3.png">
<li>SwipeListView的setAdapter()方法</li></p>

<p>
    该方法比较简单，首先调用父类的setAdapter()方法也就是ListView的setAdapter()方法。在调用完父类的setAdapter()方法后将设置SwipeListViewTouch
    Listener内的opened、openedRight和checked三个列表的初始值。这三个列表分别表示各个Item的打开状态、右滑打开状态和checked状态，在该方法内将会
    初始化为Adapter元素个数大小。该方法接下来添加一个DataSetObserver，在数据发生变化时将动态增加opened、openedRiht和checked列表的大小。
</p>


<p><img class="center" src="/images/SwipeListView4.png">
<li>SwipeListView的dismiss()方法</li></p>

<p>
    SwipeListView的dismiss()方法有点儿小复杂，该方法将根据参数position指定的Item是否处于可见的区域而执行不同的逻辑。在Item处于可见的区域时将
    创建一个ValueAnimator实例，并添加一个AnimatorUpdateListener监听，在该监听的回调方法内将动态控制Item的布局参数。在整个动画过程中不允许该
    组件进行任何操作。在当前Item不在可视区域内时将简单的添加一个PendingDismissData到mPendingDismisses中。最后如果当前Item在可见区域内时在动画
    结束后100ms将恢复该Item的Alpha，TranslateX等值并重新将该Item的布局参数恢复为原来的值，在这一切结束后将销毁mPendingDismisses列表。如果当前
    Item处于不可见区域时将只会简单的销毁mPendingDismisses列表。
</p>


<p><li>SwipeListView的dismissSelected()方法</li></p>

<p>
    该方法的基本原理和dismiss()方法类似，所不同的是该方法将通过SwipeListViewTouchListener遍历所有处于checked状态的Items并执行dismiss()方法同样
    的逻辑。在处理的Item列表内存在处于可见区域内的元素时，将恢复这些Item的值并销毁mPendingDismiss列表。
</p>


<p><img class="center" src="/images/SwipeListView5.png">
<li>SwipeListView的openAnimation()方法</li></p>

<p>
    该方法将功能的实现委托给SwipeListViewTouchListener的<code>openAnimation()</code>方法来实现，该方法将获取指定position的Item的FrontView并将其
    传递给一个同名的重载方法，在判断到该Item没有处于open状态时将调用<code>generateRevealAnimate()</code>执行左滑动画操作。
</p>


<p><img class="center" src="/images/SwipeListView6.png">
<li>SwipeListView的closeAnimate()方法</li></p>

<p>
    该方法也是调用SwipeListViewTouchListener的<code>closeAnimation()</code>方法来实现右滑恢复Item原位的操作。SwipeListViewTouchListener的方法将
    调用<code>generateRevealAnimate()</code>实现右滑恢复原位操作。

</p>


<p><li>SwipeListView的closeOpenedItems()方法</li></p>

<p>
    该方法还是通过调用SwipeListViewTouchListener的同名方法来实现对应的功能，该方法的基本思路是遍历当前可见区域内的所有Items调用closeAnimation()
    关闭所有处于opened状态的元素，也就是执行右滑恢复原位的操作。
</p>


<h1>SwipeListView用户滑动回调方法</h1>


<p><li>SwipeListView的onDismiss()方法</li></p>

<p>
    该回调方法表示那些Item元素执行了dismiss操作，将方法将事件派发给注册的SwipeListViewListener监听。<code>onDismiss()</code>方法被SwipeListViewTouch
    Listener的<code>removePendingDismisses()</code>(主要针对Item处于可见区域的情况)和swipeListView的<code>dismiss()</code>和<code>dismissSelected()
    </code>调用（这两个主要针对Item不在可见区域内的情况）。
</p>


<p><li>SwipeListView的onStartOpen()方法和onStartClose()方法</li></p>

<p>
    <code>onStartOpen()</code>方法表示指定position的Item将执行某种操作，包括左滑等操作。该方法在SwipeListViewTouchListener的<code>onTouch()
    </code>方法的Move事件内进行调用。<code>onStartClose()</code>方法表示指定position的Item将执行恢复操作，这个方法的调用也是在<code>OnTouch()
    </code>方法的Move事件内。Move事件控制调用<code>onStartOpen()</code>还是<code>onStartClose()</code>方法是由当前Item是否处于opened状态决定的。

</p>


<p><li>SwipeListView的onClickFrontView()方法和onClickBackView()方法</li></p>

<p>
    <code>onClickFrontView()</code>表示用户点击Item的FrontView，<code>onClickBackView()</code>方法表示用户点击Item的BackView。这两个方法没有什么
    可以多加介绍的。
</p>


<p><li>SwipeListView的onOpened()方法和onClosed()方法</li></p>

<p>
    <code>onOpened()</code>方法表示指定position的Item已经处于opened状态（滑动、渐隐等）并且是否是右滑的。而<code>onClosed()</code>方法表示指定
    position的Item是否处于非opened状态（恢复）。这两个方法都是在SwipeListViewTouchListener的<code>generateRevealAnimate()</code>方法内的动画结束
    回调。
</p>


<p><li>onChoiceStarted()、onChoiceEnded()和onChoiceChanged()方法</li></p>

<p>
    <code>onChoiceStarted()</code>在第一次出现Item被checked的时候调用、方法<code>onChoiceEnded()</code>在最后一个Item的checked状态变为false时调用。
    <code>onChoiceChanged()</code>在每一次有Item的checked状态发生变化时调用。所有这些方法在SwipeListViewTouchListener的swapChoiceState()方法内调用。
</p>


<p><li>onFirstListItem()、onLastListItem()和onListChanged()</li></p>

<p>
    <code>onFirstListItem()</code>和<code>onLastListItem()</code>在OnScrollListener的<code>onScroll()</code>方法调用。他们分别在第一个Item可见和最后
    一个Item可见时调用。<code>onListChanged()</code>方法在SwipeListView的<code>setAdapter()</code>方法内的数据监听器的回调中调用。
</p>


<p><li>SwipeListView的move()方法</li></p>

<p>
    <code>move()</code>方法在SwipeListViewTouchListener的<code>onTouch()</code>方法的Move事件内调用，用来通知监听器指定的Item在滑动，并且可以获得
    该Item的滑动距离。
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android开源组件之SwipeListView]]></title>
    <link href="http://TuomingZheng.github.io/blog/2014/11/05/androidkai-yuan-zu-jian-zhi-swipelistview/"/>
    <updated>2014-11-05T22:56:57+08:00</updated>
    <id>http://TuomingZheng.github.io/blog/2014/11/05/androidkai-yuan-zu-jian-zhi-swipelistview</id>
    <content type="html"><![CDATA[<blockquote><p><p>SwipeListView是最近比较火的一个开源组件，用于实现ListView元素側滑的功能。SwipeListView的使用还是比较简单的。</p></p></blockquote>

<h1>自定义属性</h1>


<p>首先需要认识SwipeListView的几个自定义属性，他们定义在swipelistview__attrs.xml文件内。</p>


<pre><code>    &lt;declare-styleable name="SwipeListView"&gt;
        &lt;attr name="swipeOpenOnLongPress" format="boolean" /&gt;
        &lt;attr name="swipeAnimationTime" format="integer" /&gt;
        &lt;attr name="swipeOffsetLeft" format="dimension" /&gt;
        &lt;attr name="swipeOffsetRight" format="dimension" /&gt;
        &lt;attr name="swipeCloseAllItemsWhenMoveList" format="boolean" /&gt;
        &lt;attr name="swipeFrontView" format="reference" /&gt;
        &lt;attr name="swipeBackView" format="reference" /&gt;
        &lt;attr name="swipeMode" format="enum"&gt;
            &lt;enum name="none" value="0" /&gt;
            &lt;enum name="both" value="1" /&gt;
            &lt;enum name="right" value="2" /&gt;
            &lt;enum name="left" value="3" /&gt;
        &lt;/attr&gt;
        &lt;attr name="swipeActionLeft" format="enum"&gt;
            &lt;enum name="reveal" value="0" /&gt;
            &lt;enum name="dismiss" value="1" /&gt;
            &lt;enum name="choice" value="2" /&gt;
        &lt;/attr&gt;
        &lt;attr name="swipeActionRight" format="enum"&gt;
            &lt;enum name="reveal" value="0" /&gt;
            &lt;enum name="dismiss" value="1" /&gt;
            &lt;enum name="choice" value="2" /&gt;
        &lt;/attr&gt;
        &lt;attr name="swipeDrawableChecked" format="reference" /&gt;
        &lt;attr name="swipeDrawableUnchecked" format="reference" /&gt;
    &lt;/declare-styleable&gt;
</code></pre>

<p>SwipeListView自定义属性具体说明如下：</p>


<ul>
    <li>第一个属性swipeOpenOnLongPress表示当前的SwipeListView是否支持长按某个元素进行滑动或则切换操作，他的取值为布尔类型。</li>
    <li>第二个属性swipeAnimationTime用来设置SwipeListView元素側滑或则进行checked状态切换的动画时间，如果不设置该属性的值SwipeListViewTouchListener
        会将其设置为Android系统内的标准动画时间（short类型）。</li>
    <li>第三个属性swipeOffsetLeft用于设置SwipeListView左滑停止后裸露在可见区域内的长度。</li>
    <li>第四个属性swipeOffsetRight为SwipeListView右滑动停止后裸露在可见区域内的长度。</li>
    <li>第五个属性swipeFrontView和swipeBackView分别指定swipeListView在滑动是处于前台和后台的组件。</li>
    <li>第六个属性swipeMode用于设置SwipeListView的滑动方向，其类型为枚举类型，分别可以取值为left(向左)、right（向右）、both（双向）和none(滑不动)。</li>
    <li>第七个属性swipeActionLeft和swipeActionRight分别用于指示SwipeListView左滑动和右滑动是的行为，其中reveal为FronView可见平滑滑动，
        dismiss为FrontView平滑滑动并伴随ListView元素alpha的渐变，最后choice取值则指定了FrontView滑动是切换checked状态值。</li>
    <li>最后一组属性swipeDrawableChecked和swipeDrawableUnchecked只有在mode取值为checked时有效，分别设置SwipeListView的元素在checked状态下的背景图片。</li>
</ul>




<h2>使用示例</h2>


<p></p>

<p>具体在使用SwipeListView时只需要配置这几个属性值即可，在SwipeListView中也实现了代码设置对应属性的方法。其他的用法和ListView大同小异，唯一需要注意的是
SwipeListView对应的Adapter的Item布局必须实现FrontView和BackView并且FrontView最好罩在BackView之上。</p>


<p><li>SwipeListView在Activity布局文件内的声明：</li></p>

<pre><code>        &lt;com.fortysevendeg.swipelistview.SwipeListView
            android:id="@+id/swipelistview"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            SwipeListView:swipeActionLeft="reveal"
            SwipeListView:swipeActionRight="reveal"
            SwipeListView:swipeAnimationTime="@android:integer/config_shortAnimTime"
            SwipeListView:swipeBackView="@+id/back_item"
            SwipeListView:swipeCloseAllItemsWhenMoveList="false"
            SwipeListView:swipeDrawableChecked="@drawable/address_check_d"
            SwipeListView:swipeDrawableUnchecked="@drawable/address_check"
            SwipeListView:swipeFrontView="@+id/front_item"
            SwipeListView:swipeMode="left"
            SwipeListView:swipeOffsetLeft="10dp"
            SwipeListView:swipeOffsetRight="10dp"
            SwipeListView:swipeOpenOnLongPress="false"
            android:divider="#FF0000" &gt;
        &lt;/com.fortysevendeg.swipelistview.SwipeListView&gt;
</code></pre>

<p><li> SwipeListView对应的Adapter的元素的布局：</li>
                &lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
                <FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
                        android:layout_width="match_parent"
                        android:layout_height="200dp" ></p>

<pre><code>                    &lt;RelativeLayout
                            android:id="@+id/back_item"
                            android:layout_width="match_parent"
                            android:layout_height="200dp" &gt;

                        &lt;Button
                            android:id="@+id/delete_button"
                            android:layout_width="wrap_content"
                            android:layout_height="wrap_content"
                            android:layout_alignParentRight="true"
                            android:text="Delete" /&gt;
                    &lt;/RelativeLayout&gt;


                    &lt;RelativeLayout
                            android:id="@+id/front_item"
                            android:layout_width="match_parent"
                            android:layout_height="200dp"
                            android:background="#FF0000FF" &gt;

                            &lt;ImageView
                                android:id="@+id/account_icon_view"
                                android:layout_width="wrap_content"
                                android:layout_height="wrap_content"
                                android:layout_alignParentLeft="true"
                                android:layout_centerVertical="true"
                                android:layout_marginLeft="5dp"
                                android:layout_marginRight="5dp"
                                android:background="@null"
                                android:src="@drawable/ic_launcher" /&gt;

                            &lt;TextView
                                android:id="@+id/account_time_view"
                                android:layout_width="wrap_content"
                                android:layout_height="wrap_content"
                                android:layout_alignParentRight="true"
                                android:layout_centerVertical="true"
                                android:gravity="center"
                                android:paddingLeft="5dp"
                                android:paddingRight="5dp"
                                android:textSize="18sp" /&gt;

                            &lt;TextView
                                android:id="@+id/account_name_view"
                                android:layout_width="match_parent"
                                android:layout_height="wrap_content"
                                android:layout_toLeftOf="@id/account_time_view"
                                android:layout_toRightOf="@id/account_icon_view"
                                android:gravity="center"
                                android:textSize="18sp" /&gt;

                            &lt;TextView
                                android:id="@+id/account_id_view"
                                android:layout_width="match_parent"
                                android:layout_height="wrap_content"
                                android:layout_below="@id/account_name_view"
                                android:layout_toLeftOf="@id/account_time_view"
                                android:layout_toRightOf="@id/account_icon_view"
                                android:gravity="center"
                                android:textSize="18sp" /&gt;
                    &lt;/RelativeLayout&gt;

            &lt;/FrameLayout&gt;
</code></pre>

<p><li>注意事项：</li></p>

<p>在SwipeListView的Adapter元素的布局内必须实现SwipeListView的自定义属性frontView和backView，并且最好将frontView覆盖在backview是以实现滑动时backView渐显效果。
SwipeListView比较恶心的地方是监听器SwipeListViewListener内的<code>onChangeSwipeMode()</code>方法必须返回在activity布局文件内声明的action类型。</p>


<p><img class="left" src="/images/SwipeList.png"></p>
]]></content>
  </entry>
  
</feed>
