<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: shell命令 | 郑拓铭博客]]></title>
  <link href="http://TuomingZheng.github.io/blog/categories/shellming-ling/atom.xml" rel="self"/>
  <link href="http://TuomingZheng.github.io/"/>
  <updated>2014-11-06T23:26:04+08:00</updated>
  <id>http://TuomingZheng.github.io/</id>
  <author>
    <name><![CDATA[TuomingZheng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shell命令之磁盘分区]]></title>
    <link href="http://TuomingZheng.github.io/blog/2014/11/06/shellming-ling-zhi-ci-pan-fen-qu/"/>
    <updated>2014-11-06T23:13:26+08:00</updated>
    <id>http://TuomingZheng.github.io/blog/2014/11/06/shellming-ling-zhi-ci-pan-fen-qu</id>
    <content type="html"><![CDATA[<p>
在Linux上我们经常进行磁盘管理，磁盘管理是系统管理者比较重要的内容。在系统上增加一块磁盘时一般的步骤是先对
磁盘进行分区建立可用的分区、对新建的磁盘分区进行格式化创建可用的文件系统、对刚建立好的文件系统进行检验最后
在系统上创建挂载点并将其挂载起来。
</p>


<p>
fdisk命令的具体用法如下：
</p>


<p>          <br/>
    fdisk   [-l]    设备名称</br>
        -l  在-l后面不带参数时将整个系统内的设备分区罗列出来，如果输入设备名称则将该设备上的分区
            信息罗列出来</p>

<pre><code>    例子：       $ sudo -s               &lt;&lt;== 切换到超级用户
                # df /                  &lt;&lt;== 查看根目录所在的磁盘
                # fdisk -l /dev/sda     &lt;&lt;== 查看/dev/sda设备的分区情况
                # fdisk /dev/sda        &lt;&lt;== 进入设备/dev/sda的交互模式
</code></pre>

<p>
在fdisk的交互模式中可以进行分区的添加、删除操作。在该模式里面有几个常用的命令如p查看设备的分区情况、d为删除
一个分区、n为新增一个分区、q为退出模式并不保存分区设置和w为退出模式并保存分区设置。
</p>


<pre><code>例子：       
        1. 删除分区：  
                        # fdisk /dev/sda    &lt;&lt;== 进入设备/dev/sda的设置模式
                        # p                 &lt;&lt;== 显示设备/dev/sda上的分区情况
                        # d                 &lt;&lt;== 删除/dev/sda上的分区，系统将提示输入待删除分区
                                             的号码删除9代表删除/dev/sda9分区
                        # q                 &lt;&lt;== 离开并且不保存刚才的分区设置

        2. 添加分区：   
                        # fdisk /dev/sda    &lt;&lt;== 进入设备/dev/sda的设置模式
                        # p                 &lt;&lt;== 查看设备/dev/sda的分区情况
                        # d                 &lt;&lt;== 删除/dev/sda上的分区，在这里将所有的分区删除
                        # n                 &lt;&lt;== 新建一个设备分区，系统将要求输入分区的类型。
                        ：p                --&gt; primary partition   新建的主分区
                          e                 --&gt; extended partition  新建的是扩展分区
                          l                 --&gt; logical partition   新间的是逻分区

                        : 设置分区号（例如1-4的数字等等）
                        : 设置起始柱面号
                        : 结束柱面号，可以手动输入结束柱面号或则(+#G|M|K)指定分区大小
                            # p                 &lt;&lt;== 查看分区设置结果
                            # q                 &lt;&lt;== 离开并不保存刚才设置的分区信息
</code></pre>

<p>
在这里必须注意的是fdisk只能在root用户下进行分区的设置。在新建分区时系统将提示我们设置新分区的类型，而分区类型无非
是主分区、扩展分区和逻辑分区。
</p>


<p>
系统提示的分区规则如下：</br>
<li>1.  1-4号分区尚未分配出去，并且系统没有扩展分区。这时将提示你选择主分区或则扩展分区。</li>
<li>2.  1-4号分区尚为分配出去，并且系统存在扩展分区。这时将提示你选择主分区或则逻辑分区。</li>
<li>3.  1-4号分区已经分配出去，系统将直接选择进行逻分区的创建。</li>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell命令之文件链接]]></title>
    <link href="http://TuomingZheng.github.io/blog/2014/11/06/shellming-ling-zhi-wen-jian-lian-jie/"/>
    <updated>2014-11-06T00:12:51+08:00</updated>
    <id>http://TuomingZheng.github.io/blog/2014/11/06/shellming-ling-zhi-wen-jian-lian-jie</id>
    <content type="html"><![CDATA[<blockquote><p>系统上文件链接有点儿恼人，经常无法正常解释它们的区别！好吧，其实理解了他们的原理那么他们也没那么容易混淆了！</p></blockquote>

<p><p>在Linux系统上存在这两种文件链接方式，他们分别是硬链接和软链接，其中软链接也称为符号链接。其实硬链接和
软链接之间还是存在不少差别，由于硬链接存在着一些限制，相对来讲软链接的使用范围更广一些。硬链接不能跨文件系统
而符号链接却没有这个限制，同时硬链接无法实现对目录的链接。这些限制都大大的降低了硬链接的使用范围。
<p>
<li>硬链接：</li> <br/>
<p>硬链接的本质并非是创建一个新的文件，而是在目录中添加了一个链接文件名，该链接文件名指向被链接文件的inode节点。
所以在使用ls命令查看链接文件和被链接的文件将会发现，他们的文件属性、权限和链接情况一模一样。在删除硬链接文件时
只有在被链接文件对应的inode中记录的链接数量为1时才会真正删除文件。
</p>
硬链接存在的限制为： 无法在不同文件系统中创建硬链接、无法为目录创建硬链接。</p>

<p><li>符号链接：</li>  <br/>
<p>
符号链接的原理与Windows下的快捷方式有些相似，符号链接可是真真切切的创建一个链接文件。这个链接文件有自己的inode
节点和磁盘数据块。不过这个链接文件的数据内容仅仅是存放被链接文件的路径，在用户访问链接文件时转向为对被链接文件
的访问。所以，用户将被链接文件删除后，将无法打开链接文件。使用ls命令查看链接文件和被链接文件可以发现他们的
inode节点是不一样的。
</p></p>

<p><p>创建链接命令：
ln  [-sf] 被链接文件 链接文件<br/>
-s 创建符号链接<br/>
-f 链接文件名已经存在，将其删除在创建链接文件<br/>
</p></p>

<pre><code>例子：   $ cp /tmp       &lt;&lt;== 进入tmp目录  
        $ cp /etc/manpath.config .  &lt;&lt;== 将etc目录下的manpath.config拷贝到当前目录  
        $ ln manpath.config manpath_hl.config   &lt;&lt;== 创建硬链接manpath_hl.config  
        $ rm -f manpath.config                  &lt;&lt;== 删除被链接文件，硬链接文件依然存在
        $ cat manpath.config                    &lt;&lt;== 可以查看文件内容，文件并未被真正删除  
        $ rm -f manpath_hl.config               &lt;&lt;== 删除硬链接文件  
        $ 
        $ cp /etc/manpath.config .
        $ ln -s manpath.config manpath_sl.config    &lt;&lt;== 创建符号链接文件manpath_sl.config  
        $ cat manpath_sl.config                     &lt;&lt;== 可以看到文件内容
        $ rm -f manpath.config                      &lt;&lt;== 删除被链接文件  
        $ cat manpath_sl.config                     &lt;&lt;== 无法读取文件
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell命令之备份与恢复]]></title>
    <link href="http://TuomingZheng.github.io/blog/2014/11/05/shellming-ling-zhi-bei-fen-yu-hui-fu/"/>
    <updated>2014-11-05T23:58:38+08:00</updated>
    <id>http://TuomingZheng.github.io/blog/2014/11/05/shellming-ling-zhi-bei-fen-yu-hui-fu</id>
    <content type="html"><![CDATA[<blockquote><p>备份是生活中比不可少的操作，如果在灾难发生时没有必要的备份那你将会欲哭无泪。Linux系统的Shell提供了强有力
的备份工具dump,为此我们有必要来了解一下这个很酷的小伙子。@@</p></blockquote>

<p>
Linux上有个强大的备份工具，那就是使用dump命令。dump命令的功能十分强大，该命令不仅可以备份整个文件系统而且
还可以备份指定的目录。不过dump命令在备份目录时存在一定的限制，那就是只能完整的备份整个目录，无法制定等级
进行备份。
</p>


<p>
下面将具体介绍使用dump进行文件系统备份和目录备份，以及他们的区别：  
</p>


<p><li>使用dump命令备份整个文件系统：</li></p>

<p>
使用dump命令备份整个文件系统时可以制定等级进行备份，也就是说我们可以在第一次备份指定文件系统时进行完整备份，
在以后对同一个文件系统进行备份时只需要备份当前文件系统与以前备份之间差异就可以。这样就可以大大减轻备份文件
对系统空间的使用量。
</p>


<pre><code>                    dump    [-Suvj#] [-f 生成的备份文件]  待备份文件  
                            -S 查看备份指定文件需要的磁盘空间  
                            -u 将本次进行备份的时间记录到/etc/dumpdates文件内  
                            -v 查看dump备份过程中的信息  
                            -# #代表数字0到9，这个参数一般在制定等级备份时使用  
                            -f 备份产生的文件名称  

                    dump -W &lt;&lt;== 该命令查看/etc/fstab内具有dump设置的分区是否备份过

                    例子：   $ df -h &lt;&lt;== 找出最小的文件系统进行备份处理
                            $ dump -0vj -f root.dump0 /     &lt;&lt;== 对root目录进行备份, 在这里
                                                                 root目录是一个文件系统  
                            $ touch new_file.txt            &lt;&lt;== 在根目录下新建一个文件  
                            $ dump -1vj -f root.dump1 /     &lt;&lt;== 制定等级进行备份  
</code></pre>

<p><li>使用dump命令备份指定目录：</li></p>

<p>
使用dump命令备份目录存在一定的限制，例如无法使用-u、-#参数并且所有的备份数据必须在该目录下。  
</p>


<pre><code>                    dump    [-Svj] [-f 生成的备份文件]   待备份文件  
                            -S  查看备份指定文件需要的磁盘空间  
                            -v  显示备份过程中的信息  
                            -j  数据使用bzip2进行压缩  
                            -f  备份产生的文件名字  

                    例子：   $ dump -S /etc  &lt;&lt;== 查看备份etc目录所需的磁盘空间  
                            $ dump -0vj -f etc.dump /etc    &lt;&lt;== 对etc目录进行压缩备份  
</code></pre>

<p><li>使用restore命令进行恢复操作：</li></p>

<pre><code>    restore用法：            restore -t [-f dumpfile] [-h]   &lt;&lt;== 查看dump文件  
                            restore -C [-f dumpfile] [-D 挂载点] &lt;&lt;== 比较dump与实际文件  
                            restore -i [-f dumpfile]                &lt;&lt;== 进入互动模式，可以  
                                                                         进行部分文件还原  
                            restore -r [-f dumpfile]        &lt;&lt;== 还原整个文件系统  

                            其中-i一般进行目录的还原，而-r一般是进行文件系统的还原, -D参数表示  
                        查看挂载点与dump内的不同文件  

    例子：       $ restore -t -f etc.dump        &lt;&lt;== 查看etc.dump内备份含有的数据  
                $ restore -i -f etc.dump        &lt;&lt;== 进入交互模式可以对目录进行部分还原   
</code></pre>

<p>
其中restore的交互模式中可以使用add file、delete file和extract进行部分文件恢复的添加、删除和最终执行恢复操作。  
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell命令之压缩与解压]]></title>
    <link href="http://TuomingZheng.github.io/blog/2014/11/05/shellming-ling-zhi-ya-suo-yu-jie-ya/"/>
    <updated>2014-11-05T01:42:59+08:00</updated>
    <id>http://TuomingZheng.github.io/blog/2014/11/05/shellming-ling-zhi-ya-suo-yu-jie-ya</id>
    <content type="html"><![CDATA[<blockquote><p>Linux系统不以文件的扩展名区分文件，但是我们常常在Linux上看到诸如.gz、.bz2、.Z和.tar.bz2等文件扩展名的文件。
其实这些压缩文件的扩展名仅仅是为了便于用户识别该压缩文件是以哪一种压缩软件进行压缩的。</p></blockquote>

<h1>概述</h1>


<p>
在Linux上常用的压缩与解压命令有gzip、bzip2和compress。tar命令本身是对多个文件进行打包操作，但是用户在Linux系统上常常使  
tar命令携带特定的参数在打包的同时进行压缩处理。
</p>




<p>
下面将逐一介绍常用的压缩与解压命令，他们分别是：
</p>




<h1>gzip命令</h1>


<p><p>
gzip [-cdtv#] 待处理文件名<br/>
-c 将压缩数据输出到标准输出流，该参数经常配合数据流重定向使用<br/>
-d 解压指定的压缩文件，该压缩文件只能是使用gzip或则compress压缩形成的压缩文件<br/>
-t 用来检验指定的压缩文件的一致性，查看压缩文件是否有错误<br/>
-v 在压缩过程中显示压缩比等信息<br/>
-# #代表数字-1到-9，数字代表压缩等级其中-1等级压缩最快但压缩比最差</p>

<pre><code>    例子：   $ cp /etc/man.config .      &lt;&lt;== 将etc目录下的man.config文件拷贝到当前目录  
            $ gzip -v man.config        &lt;&lt;== 压缩当前目录下的man.config文件，生成man.config.gz文件  
                                        &lt;&lt;== 在生成压缩文件后man.config将消失  
            $ gzip -d man.config.gz     &lt;&lt;== 将当前目录下的man.config.gz文件解压，该操作将在当前目录  
                                        &lt;&lt;== 下生成man.config文件，同时压缩文件将消失  
            $ gzip -c man.config &gt; man.config.gz    &lt;&lt;== 使用数据流重定向技术，在当前目录下生成压缩  
                                                    &lt;&lt;== 文件同时原文件依然存在
            $ zcat man.config.gz        &lt;&lt;== 该命令用于查看gzip压缩文件，当时压缩文件对应的原文件必须  
                                        &lt;&lt;=  是纯文本文件  
</code></pre>

<p></p>
<h1>bzip2命令</h1>
<p>
bzip2 [-cdkvz#] 待处理文件名<br/>
-c 将压缩数据输出到标志输出流，一般配合数据流重定向使用<br/>
-d 解压指定的压缩文件，该压缩文件一般是gzip压缩文件<br/>
-k 压缩过程中保留原文件，即不删除原文件<br/>
-v 显示压缩过程中的诸如压缩比等信息
-z 将指定的文件使用gzip进行压缩处理<br/>
-# #代表数组-1到-9, 数字同样是压缩等级，其中-1的最快当压缩比最差</p>

<pre><code>    例子：       $ cp /etc/manpath.config .      &lt;&lt;== 将etc目录下的manpath.config文件拷贝到当前目录  
                $ bzip2 -z manpath.config       &lt;&lt;== 使用bzip2压缩文件，压缩后将形成manpath.config
                                                     .bz2  文件，但是manpath.config将消失  
                $ bzip2 -d manpath.config.bz2   &lt;&lt;== 解压当前目录下的压缩文件，在解压后将生成
                                                     manpath.config文件，但是原来的压缩文件将消失  
                $ bzip2 -c manpath.config &gt; manpath.config.bz2      &lt;&lt;== 使用数据流重定下技术压缩
                                                                    &lt;&lt;== manpath.config文件，将生
                                                                    &lt;&lt;== 成指定名字的压缩文件同时
                                                                    &lt;&lt;== 原文件将继续存在  

                $ rm -f manpath.config,bz2  
                $ bzip2 -k manpath.config       &lt;&lt;== 该命令的作用与上一条压缩命令相同  
                $ bzcat manpath.config.bz2      &lt;&lt;== 使用bzcat命令查看压缩文件  
</code></pre>

<p></p>
<h1>compress命令与uncompress命令</h1>
<p>
<li>compress [-rcv] 待处理文件名称  </li>
-r 将目录下的文件一并进行压缩处理<br/>
-c 将压缩数据输出到标准输出流上<br/>
-v 显示压缩过程中的信息</p>

<p><li>uncompress 压缩文件（该压缩文件一般移.Z作为扩展名）</li></p>

<pre><code>    例子：   $ cp /etc/manpath.config .  &lt;&lt;== 将etc下的manpath.config文件拷贝的当前目录  
            $ compress manpath.config   &lt;&lt;== 将采用compress压缩manpath.config文件并在当前  
                                        &lt;&lt;== 目录下生成maptah.config.Z文件（不保留原文件）  
            $ uncompress manpath.config.Z   &lt;&lt;== 解压maptah.config.Z文件(不保留原文件)  
</code></pre>

<p>其实compress命令在现在的Linux上使用并不多，最常用的还是gzip和bzip2两个命令。其中compress命令的压缩比最差，bzip2命令的压缩比最好。
</p>
<h1>tar命令</h1>
<p>下面我们将分别介绍使用tar命令压缩、解压、打包、解打包和查看的用法。</p>
<li>打包、压缩文件: tar [-j|-z] [cv] [-f 处理后生成的文件名]  待处理文件名</li>
<li>查看文件: tar [-j|-z] [tv] [-f 待查看的文件]</li>
<li>解压、解打包: tar [-j|-z] [xv] [-f 待处理文件名]  [-C 目标目录]</li></p>

<p>参数说明：</br>  <br/>
-c 打包指定的文件（目录）<br/>
-t 查看打包文件内有那些文件<br/>
-x 解打包指定文件、配合-C参数实现解打包到指定目录下<br/>
-j 使用bzip2进行压缩或则解压，一般与-c配合表示打包并压缩文件。与-x配合表示解打包并解压指定文件<br/>
-z 使用gzip进行压缩或则解压，使用情况与-j类似<br/>
-v 显示处理过程中的信息 (文件名)<br/>
-f 该参数后面一般携带最终生成的文件<br/>
-C 指定解打包后生成文件的位置<br/>
-p 小写字母p代表打包过程中保留原文件的权限属性<br/>
-P 大写字母P代表保留原文件的绝对路径<br/>
&ndash;exclude=filename  打包过程中不处理指定的文件</p>

<pre><code>    例子：       $ tar -jpcv -f ./etc.tar.bz2 /etc   &lt;&lt;== 将etc目录打包并使有bzip2进行压缩，
                                                        同时保留原来文件的权限属性  
                $ tar -jtv -f etc.tar.bz2           &lt;&lt;== 查看包etc.tar.bz2内的文件情况  
                $ tar -jxv -f etc.tar.bz2 -C /tmp   &lt;&lt;== 将包etc.tar.bz2解压缩到/tmp目录  
                $ tar -jpcv -f etc.tar.bz2 /etc  
                $ tar -jxv -f etc.tar.bz2 /etc/passwd   &lt;&lt;== 仅仅解压包etc.tar.bz2内的passwd文件 
                $ tar -jtv -f etc.tar.bz2 --exclude=/etc/passwd /etc    &lt;&lt;== 将etc目录打包并使用  
                                                                        &lt;&lt;== bzip2压缩但是不包括  
                                                                        &lt;&lt;== /etc/passwd文件  
</code></pre>

<p>在Linux系统上我们经常看到tarfile和tarball名词，他们的具体区别是tarfile是使用tar命令进行打包并且没有使用压缩参数, 而tarball则是使用tar命令并且进行了压缩处理。</p>
]]></content>
  </entry>
  
</feed>
